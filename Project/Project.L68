00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.03
Created On: 5/31/2015 2:51:05 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68K-Disassembler
00000000                             3  * Written by : Michael Voght, Joel Richart, Allon Kim
00000000                             4  * Date       : 6/05/15
00000000                             5  * Description: The user may store an EASY68K program into the 
00000000                             6  *               memory of this program. The user then gives a 
00000000                             7  *               starting address and ending address, the
00000000                             8  *               Disassembler will read the data in memory from a 
00000000                             9  *               memory location and convert the data into valid
00000000                            10  *               opcodes. 
00000000                            11  *               ASSUMPTION: The user cannot have the origin of
00000000                            12  *               their loaded program at or less than $3000.
00000000                            13  *-----------------------------------------------------------
00001000                            14      ORG    $1000
00001000                            15  START:                  ; first instruction of program
00001000                            16                      
00001000  6100 001C                 17  MAIN                BSR     INIT_DATA
00001004  6100 002A                 18                      BSR     GET_INPUT
00001008  6100 0014                 19                      BSR     INIT_DATA
0000100C  6100 0092                 20                      BSR     CONFIRM_INPUT
00001010  6100 000C                 21                      BSR     INIT_DATA
00001014  6100 026E                 22                      BSR     DISASSEMBLE
00001018  6100 1754                 23                      BSR     PLAY_AGAIN
0000101C  60E2                      24                      BRA     MAIN
0000101E                            25  *-----------------------------------------------------------
0000101E                            26  *---------------------SUB-ROUTINES--------------------------
0000101E                            27  *-----------------------------------------------------------
0000101E                            28  
0000101E                            29  ************************************************************
0000101E                            30  *INIT_DATA: Sets all the data registers to 0
0000101E                            31  *PRE-CONDITIONS: N/A
0000101E                            32  *POST-CONDITIONS: D0 - D7 all equal 0
0000101E                            33  ************************************************************
0000101E                            34  
0000101E  4280                      35  INIT_DATA           CLR.L   D0                      ; Reset registers
00001020  4281                      36                      CLR.L   D1
00001022  4282                      37                      CLR.L   D2
00001024  4283                      38                      CLR.L   D3
00001026  4284                      39                      CLR.L   D4
00001028  4285                      40                      CLR.L   D5
0000102A  4286                      41                      CLR.L   D6
0000102C  4287                      42                      CLR.L   D7
0000102E  4E75                      43                      RTS
00001030                            44  
00001030                            45  ************************************************************
00001030                            46  *GET_INPUT: Gets the users starting address and ending address
00001030                            47  *               of the data they would like disassembled
00001030                            48  *PRE-CONDITIONS: Data registers are cleared, and users code
00001030                            49  *               has an origin above 3000
00001030                            50  *POST-CONDITIONS: Starting and Ending address are stored
00001030                            51  ************************************************************
00001030                            52  
00001030  43F9 00002845             53  GET_INPUT           LEA     START_PRINT, A1         ; Ask for Starting Address
00001036  6100 1792                 54                      BSR     PRINT_MESSAGE
0000103A                            55                  
0000103A  6100 1796                 56                      BSR     USER_INPUT_STR          ; Read Starting Address
0000103E  B23C 0008                 57                      CMP.B   #8, D1
00001042  6E00 004E                 58                      BGT     INVALID_INPUT           ; Address must be long length
00001046  2449                      59                      MOVEA.L A1, A2                  ; Copy Input
00001048  6100 0118                 60                      BSR     CONVERT_STR
0000104C  B03C 0001                 61                      CMP.B   #1, D0                  ; Check for bad hex value
00001050  6700 0040                 62                      BEQ     INVALID_INPUT
00001054  B6BC 00003002             63                      CMP.L   #$3002, D3              ; Input can't be less than 3000
0000105A  6500 0036                 64                      BCS     INVALID_INPUT
0000105E  23C3 000027E4             65                      MOVE.L  D3, START_ADD           ; Store if good
00001064                            66  
00001064  61B8                      67                      BSR     INIT_DATA               ; Clear registers
00001066  43F9 00002886             68                      LEA     END_PRINT, A1           ; Ask for Ending Addrress
0000106C  6100 175C                 69                      BSR     PRINT_MESSAGE
00001070                            70                  
00001070  6100 1760                 71                      BSR     USER_INPUT_STR          ; Read Ending Address
00001074  B23C 0008                 72                      CMP.B   #8, D1
00001078  6E00 0018                 73                      BGT     INVALID_INPUT
0000107C  2449                      74                      MOVEA.L A1, A2
0000107E  6100 00E2                 75                      BSR     CONVERT_STR
00001082  B03C 0001                 76                      CMP.B   #1, D0
00001086  6700 000A                 77                      BEQ     INVALID_INPUT
0000108A  23C3 000027E8             78                      MOVE.L  D3, END_ADD
00001090  4E75                      79                      RTS
00001092                            80  
00001092  43F9 00002984             81  INVALID_INPUT       LEA     BAD_INPUT, A1           ; Tell user if bad address given
00001098  6100 1730                 82                      BSR     PRINT_MESSAGE
0000109C  6000 FF62                 83                      BRA     MAIN                    ; Start over
000010A0                            84  
000010A0                            85  ************************************************************
000010A0                            86  *CONFIRM_INPUT: Displays the address the user gave, and confirms
000010A0                            87  *               if that is the address the user would like to
000010A0                            88  *               disassemble
000010A0                            89  *PRE-CONDITIONS: The starting address and ending address are 
000010A0                            90  *               stored
000010A0                            91  *POST-CONDITIONS: If Y or y is given by the user the program
000010A0                            92  *               continues, if not then the program will ask
000010A0                            93  *               for the users starting and ending address
000010A0                            94  ************************************************************
000010A0                            95                  
000010A0  43F9 000028C5             96  CONFIRM_INPUT       LEA     CONFIRM_START, A1       ; Show Starting Address
000010A6  6100 1722                 97                      BSR     PRINT_MESSAGE
000010AA  4DF9 000027E4             98                      LEA     START_ADD, A6
000010B0  7603                      99                      MOVE.L  #3, D3
000010B2  43F9 000027F2            100                      LEA     BUFFER, A1
000010B8  6100 0062                101                      BSR     GRAB_DATA               ; Print given address
000010BC  12FC 0000                102                      MOVE.B  #$0, (A1)+
000010C0  6100 16FA                103                      BSR     PRINT_BUFFER
000010C4                           104                      
000010C4  43F9 000028D8            105                      LEA     CONFIRM_END, A1         ; Show Ending Address
000010CA  6100 16FE                106                      BSR     PRINT_MESSAGE
000010CE  4DF9 000027E8            107                      LEA     END_ADD, A6
000010D4  7603                     108                      MOVE.L  #3, D3
000010D6  43F9 000027F2            109                      LEA     BUFFER, A1
000010DC  6100 003E                110                      BSR     GRAB_DATA               ; print given address
000010E0  12FC 0000                111                      MOVE.B  #$0, (A1)+
000010E4  6100 16D6                112                      BSR     PRINT_BUFFER
000010E8                           113                      
000010E8  43F9 000028E9            114                      LEA     CONFIRM_MESSAGE, A1     ; Ask user to confirm addresses
000010EE  6100 16DA                115                      BSR     PRINT_MESSAGE
000010F2  103C 0005                116                      MOVE.B  #5, D0
000010F6  4E4F                     117                      TRAP    #15
000010F8  43F9 00002842            118                      LEA     NEW_LINE, A1
000010FE  6100 16CA                119                      BSR     PRINT_MESSAGE
00001102  B2BC 00000059            120                      CMP.L   #$59, D1                ; If Y continue, if not Y start over
00001108  6700 0010                121                      BEQ     GOOD_INPUT
0000110C  B2BC 00000079            122                      CMP.L   #$79, D1                ; y is acceptable
00001112  6700 0006                123                      BEQ     GOOD_INPUT
00001116  6000 FEE8                124                      BRA     MAIN
0000111A  4E75                     125  GOOD_INPUT          RTS
0000111C                           126  
0000111C                           127  ************************************************************
0000111C                           128  *GRAB_DATA: Given values stored in A6, those values are converted
0000111C                           129  *               to ASCII Hex values, so they can be displayed
0000111C                           130  *               to the console appropriately.
0000111C                           131  *PRE-CONDITIONS: D3 must contained 0 for byte length, 1 for 
0000111C                           132  *               word length and 3 for long length.
0000111C                           133  *POST-CONDITIONS: converts the value stored in A6 into ASCII
0000111C                           134  *               hex and is then added to A1 to be handled
0000111C                           135  ************************************************************
0000111C                           136  
0000111C  121E                     137  GRAB_DATA           MOVE.B  (A6)+, D1               ; grab byte of address
0000111E  6100 0008                138                      BSR     CONVERT_TO_HEX
00001122  5303                     139                      SUB.B   #1, D3                  ; D3 holds address length
00001124  6CF6                     140                      BGE     GRAB_DATA               ; display address in bytes
00001126  4E75                     141                      RTS 
00001128                           142  
00001128  1401                     143  CONVERT_TO_HEX      MOVE.B  D1, D2                  ; Copy for second nibble
0000112A  C23C 00F0                144                      AND.B   #$F0, D1                ; Mask first nibble
0000112E  E809                     145                      LSR.B   #4, D1                  ; bring nibble to front
00001130  B23C 000A                146                      CMP.B   #10, D1                 ; If 10 or greater, it's a letter
00001134  6C00 001E                147                      BGE     MSB_LETTER
00001138  0601 0030                148                      ADD.B   #$30, D1                ; if not letter then decimal + #$30 = value in hex  
0000113C  12C1                     149  MSB                 MOVE.B  D1, (A1)+
0000113E  C43C 000F                150                      AND.B   #$0F, D2                ; Mask second nibble
00001142  B43C 000A                151                      CMP.B   #10, D2
00001146  6C00 0012                152                      BGE     LSB_LETTER
0000114A  0602 0030                153                      ADD.B   #$30, D2
0000114E  12C2                     154  LSB                 MOVE.B  D2, (A1)+
00001150  6000 000E                155                      BRA     DONE_PRINT
00001154                           156                  
00001154  0601 0037                157  MSB_LETTER          ADD.B   #$37, D1                ; Letter in decimal + #$37 = letter in hex
00001158  60E2                     158                      BRA     MSB
0000115A                           159  
0000115A  0602 0037                160  LSB_LETTER          ADD.B   #$37, D2
0000115E  60EE                     161                      BRA     LSB                
00001160                           162  
00001160  4E75                     163  DONE_PRINT          RTS
00001162                           164  
00001162                           165  ************************************************************
00001162                           166  *CONVERT_STR: Given a string of decimal values, the string is
00001162                           167  *               converted to ASCII Hex
00001162                           168  *PRE-CONDITIONS: D0 is cleared and D1 contains the string length
00001162                           169  *POST-CONDITIONS: Converts a string of decimal values to hex
00001162                           170  ************************************************************
00001162                           171  
00001162  6100 0010                172  CONVERT_STR         BSR     STR_TO_HEX
00001166  B03C 0001                173                      CMP.B   #1, D0                  ; D0 holds flag for bad hex 
0000116A  6700 0006                174                      BEQ     RETURN
0000116E  5301                     175                      SUB.B   #1, D1                  ; Iterator stops when string is empty
00001170  66F0                     176                      BNE     CONVERT_STR
00001172  4E75                     177  RETURN              RTS
00001174                           178  
00001174                           179  ************************************************************
00001174                           180  *STR_TO_HEX: Given a string, determine its decimal value and
00001174                           181  *               replace it with it's hex value.
00001174                           182  *PRE-CONDITIONS: A2 holds the string to be converted, D0 is empty
00001174                           183  *               to catch errors in the string
00001174                           184  *POST-CONDITIONS: D3 holds the final conversion
00001174                           185  ************************************************************
00001174                           186                  
00001174  141A                     187  STR_TO_HEX          MOVE.B  (A2)+, D2               ; Pointer to value being converted
00001176  1E01                     188                      MOVE.B  D1, D7
00001178  5347                     189                      SUB.W   #1, D7
0000117A  CEFC 0004                190                      MULU    #4, D7                  ; Hex value has 4 binary numbers, position of hex is multiplicative by 4
0000117E                           191                  
0000117E  B43C 0030                192                      CMP.B   #$30,D2                 ; Sets character value depending on HEX value
00001182  6600 000A                193                      BNE     HEX_ONE
00001186  7400                     194                      MOVE.L  #$0, D2                 ; 0
00001188  EFA2                     195                      ASL.L   D7, D2                  ; Shift hex to appropriate location
0000118A  D682                     196                      ADD.L   D2, D3                  ; D3 will store the final hex value
0000118C  4E75                     197                      RTS
0000118E                           198  
0000118E  B43C 0031                199  HEX_ONE             CMP.B   #$31,D2
00001192  6600 000A                200                      BNE     HEX_TWO
00001196  7401                     201                      MOVE.L  #$1, D2                 ; 1
00001198  EFA2                     202                      ASL.L   D7, D2
0000119A  D682                     203                      ADD.L   D2, D3
0000119C  4E75                     204                      RTS
0000119E                           205          
0000119E  B43C 0032                206  HEX_TWO             CMP.B   #$32,D2
000011A2  6600 000A                207                      BNE     HEX_THREE
000011A6  7402                     208                      MOVE.L  #$2, D2                 ; 2
000011A8  EFA2                     209                      ASL.L   D7, D2
000011AA  D682                     210                      ADD.L   D2, D3
000011AC  4E75                     211                      RTS
000011AE                           212                         
000011AE  B43C 0033                213  HEX_THREE           CMP.B   #$33,D2
000011B2  6600 000A                214                      BNE     HEX_FOUR
000011B6  7403                     215                      MOVE.L  #$3, D2                 ; 3
000011B8  EFA2                     216                      ASL.L   D7, D2
000011BA  D682                     217                      ADD.L   D2, D3
000011BC  4E75                     218                      RTS
000011BE                           219                          
000011BE  B43C 0034                220  HEX_FOUR            CMP.B   #$34,D2
000011C2  6600 000A                221                      BNE     HEX_FIVE
000011C6  7404                     222                      MOVE.L  #$4, D2                 ; 4
000011C8  EFA2                     223                      ASL.L   D7, D2
000011CA  D682                     224                      ADD.L   D2, D3
000011CC  4E75                     225                      RTS
000011CE                           226                          
000011CE  B43C 0035                227  HEX_FIVE            CMP.B   #$35,D2
000011D2  6600 000A                228                      BNE     HEX_SIX
000011D6  7405                     229                      MOVE.L  #$5, D2                 ; 5
000011D8  EFA2                     230                      ASL.L   D7, D2
000011DA  D682                     231                      ADD.L   D2, D3
000011DC  4E75                     232                      RTS
000011DE                           233                          
000011DE  B43C 0036                234  HEX_SIX             CMP.B   #$36,D2
000011E2  6600 000A                235                      BNE     HEX_SEVEN
000011E6  7406                     236                      MOVE.L  #$6, D2                 ; 6
000011E8  EFA2                     237                      ASL.L   D7, D2
000011EA  D682                     238                      ADD.L   D2, D3
000011EC  4E75                     239                      RTS
000011EE                           240                          
000011EE  B43C 0037                241  HEX_SEVEN           CMP.B   #$37,D2
000011F2  6600 000A                242                      BNE     HEX_EIGHT
000011F6  7407                     243                      MOVE.L  #$7, D2                 ; 7
000011F8  EFA2                     244                      ASL.L   D7, D2
000011FA  D682                     245                      ADD.L   D2, D3
000011FC  4E75                     246                      RTS
000011FE                           247                          
000011FE  B43C 0038                248  HEX_EIGHT           CMP.B   #$38,D2
00001202  6600 000A                249                      BNE     HEX_NINE
00001206  7408                     250                      MOVE.L  #$8, D2                 ; 8
00001208  EFA2                     251                      ASL.L   D7, D2
0000120A  D682                     252                      ADD.L   D2, D3
0000120C  4E75                     253                      RTS
0000120E                           254                          
0000120E  B43C 0039                255  HEX_NINE            CMP.B   #$39,D2
00001212  6600 000A                256                      BNE     HEX_A
00001216  7409                     257                      MOVE.L  #$9, D2                 ; 9
00001218  EFA2                     258                      ASL.L   D7, D2
0000121A  D682                     259                      ADD.L   D2, D3
0000121C  4E75                     260                      RTS
0000121E                           261                          
0000121E  B43C 0041                262  HEX_A               CMP.B   #$41,D2
00001222  6600 000A                263                      BNE     HEX_B
00001226  740A                     264                      MOVE.L  #$A, D2                 ; A
00001228  EFA2                     265                      ASL.L   D7, D2
0000122A  D682                     266                      ADD.L   D2, D3
0000122C  4E75                     267                      RTS
0000122E                           268                  
0000122E  B43C 0042                269  HEX_B               CMP.B   #$42,D2
00001232  6600 000A                270                      BNE     HEX_C
00001236  740B                     271                      MOVE.L  #$B, D2                 ; B
00001238  EFA2                     272                      ASL.L   D7, D2
0000123A  D682                     273                      ADD.L   D2, D3
0000123C  4E75                     274                      RTS
0000123E                           275                          
0000123E  B43C 0043                276  HEX_C               CMP.B   #$43,D2
00001242  6600 000A                277                      BNE     HEX_D
00001246  740C                     278                      MOVE.L  #$C, D2                 ; C
00001248  EFA2                     279                      ASL.L   D7, D2
0000124A  D682                     280                      ADD.L   D2, D3
0000124C  4E75                     281                      RTS
0000124E                           282                  
0000124E  B43C 0044                283  HEX_D               CMP.B   #$44,D2
00001252  6600 000A                284                      BNE     HEX_E
00001256  740D                     285                      MOVE.L  #$D, D2                 ; D
00001258  EFA2                     286                      ASL.L   D7, D2
0000125A  D682                     287                      ADD.L   D2, D3
0000125C  4E75                     288                      RTS
0000125E                           289                          
0000125E  B43C 0045                290  HEX_E               CMP.B   #$45,D2
00001262  6600 000A                291                      BNE     HEX_F
00001266  740E                     292                      MOVE.L  #$E, D2                 ; E
00001268  EFA2                     293                      ASL.L   D7, D2
0000126A  D682                     294                      ADD.L   D2, D3
0000126C  4E75                     295                      RTS
0000126E                           296                          
0000126E  B43C 0046                297  HEX_F               CMP.B   #$46,D2
00001272  6600 000A                298                      BNE     HEX_INVALID
00001276  740F                     299                      MOVE.L  #$F, D2                 ; F
00001278  EFA2                     300                      ASL.L   D7, D2
0000127A  D682                     301                      ADD.L   D2, D3
0000127C  4E75                     302                      RTS
0000127E                           303                  
0000127E  103C 0001                304  HEX_INVALID         MOVE.B  #1, D0
00001282  4E75                     305                      RTS
00001284                           306  
00001284                           307  ************************************************************
00001284                           308  *DISASSEMBLE: Reads a byte from memory, known as an OPCODE,
00001284                           309  *               prints the address that the OPCODE was read
00001284                           310  *               from and then determines the OPCODE through
00001284                           311  *               CYPHER_OPCODE. Also handles how many OPCODES
00001284                           312  *               can be printed to a screen.
00001284                           313  *PRE-CONDITIONS: Starting address and ending address are
00001284                           314  *               stored in START_ADD and END_ADD. Memory
00001284                           315  *               should also contain a valid OPCODE or it will
00001284                           316  *               print out bad data.
00001284                           317  *POST-CONDITIONS: Grabs and shares memory contents at given 
00001284                           318  *               address and repeats until finished. Only a 
00001284                           319  *               page of contents is displayed at a time.
00001284                           320  ************************************************************
00001284                           321  
00001284  2079 000027E4            322  DISASSEMBLE         MOVE.L  (START_ADD), A0         ; load starting address into pointer
0000128A  47F9 000027E8            323                      LEA     END_ADD, A3             ; Iteration ends at ending address
00001290  2013                     324                      MOVE.L  (A3), D0
00001292  1E3C 0019                325                      MOVE.B  #25, D7                 ; Page controller (25 lines displayed at a time)
00001296  43F9 000027F2            326  DIS_LOOP            LEA     BUFFER, A1
0000129C  B088                     327                      CMP.L   A0, D0                  ; If starting address is less then end address keep going
0000129E  6F00 001C                328                      BLE     DIS_DONE
000012A2  6100 1422                329                      BSR     PRINT_ADDRESS
000012A6  3218                     330                      MOVE.W  (A0)+, D1               ; grab OPCODE
000012A8  48A7 8100                331                      MOVEM.W D0/D7, -(SP)            ; D0 and D7 are saved so they can be used in Cyper Opcode
000012AC  6100 002C                332                      BSR     CYPHER_OPCODE
000012B0  4C9F 0081                333                      MOVEM.W (SP)+, D0/D7            ; return values back D0 and D7
000012B4  5307                     334                      SUB.B   #1, D7                  ; subtract 1 from iterator due to 1 line of OPCODE being written
000012B6  6700 0006                335                      BEQ     MAX_PAGE
000012BA  60DA                     336                      BRA     DIS_LOOP                ; Repeat until at ending address
000012BC                           337                  
000012BC  4E75                     338  DIS_DONE            RTS
000012BE                           339  
000012BE  48A7 8000                340  MAX_PAGE            MOVEM.W D0, -(SP)               ; D0 is saved to be used in user_input_str
000012C2  43F9 0000291E            341                      LEA     CONTINUE, A1
000012C8  6100 1500                342                      BSR     PRINT_MESSAGE
000012CC  6100 1504                343                      BSR     USER_INPUT_STR
000012D0  4C9F 0001                344                      MOVEM.W (SP)+, D0               ; return value back to D0
000012D4  1E3C 001E                345                      MOVE.B  #30, D7                 ; iterator for 30 lines perpage is set
000012D8  60BC                     346                      BRA     DIS_LOOP
000012DA                           347                  
000012DA                           348  ************************************************************
000012DA                           349  *CYPHER_OPCODE: Given an OPCODE determines and displays the
000012DA                           350  *               OPCODE to the Console
000012DA                           351  *PRE-CONDITIONS: D1 contains the Hex OPCODE to be disassembled
000012DA                           352  *POST-CONDITIONS: OPCODE is disassembled and appropriately
000012DA                           353  *               display to the console.
000012DA                           354  ************************************************************
000012DA                           355  
000012DA  6100 140A                356  CYPHER_OPCODE       BSR     GRAB_FIRST_HEX
000012DE                           357                      
000012DE  B43C 0000                358                      CMP.B   #$0, D2
000012E2  6700 0056                359                      BEQ     FIRST_HEX_IS_0
000012E6                           360                      
000012E6  B43C 0003                361                      CMP.B   #$3, D2                 ; 0 condition has already been checked, so 1-3 is move
000012EA  6F00 011A                362                      BLE     OPCODE_MOVE_GROUP
000012EE                           363                      
000012EE  B43C 0004                364                      CMP.B   #$4, D2
000012F2  6700 0068                365                      BEQ     FIRST_HEX_IS_4
000012F6                           366                      
000012F6  B43C 0005                367                      CMP.B   #$5, D2
000012FA  6700 0524                368                      BEQ     OPCODE_SUBQ
000012FE                           369                      
000012FE  B43C 0006                370                      CMP.B   #$6, D2
00001302  6700 008A                371                      BEQ     FIRST_HEX_IS_6
00001306                           372                      
00001306  B43C 0008                373                      CMP.B   #$8, D2
0000130A  6700 00B2                374                      BEQ     FIRST_HEX_IS_8
0000130E                           375                      
0000130E  B43C 0009                376                      CMP.B   #$9, D2
00001312  6700 0642                377                      BEQ     OPCODE_SUB
00001316                           378                      
00001316  B43C 000B                379                      CMP.B   #$B, D2
0000131A  6700 00AA                380                      BEQ     FIRST_HEX_IS_B
0000131E                           381                      
0000131E  B43C 000C                382                      CMP.B   #$C, D2
00001322  6700 0720                383                      BEQ     OPCODE_MULS
00001326                           384                      
00001326  B43C 000D                385                      CMP.B   #$D, D2
0000132A  6700 00AC                386                      BEQ     FIRST_HEX_IS_D
0000132E                           387                      
0000132E  B43C 000E                388                      CMP.B   #$E, D2
00001332  6700 00C0                389                      BEQ     FIRST_HEX_IS_E
00001336                           390                      
00001336  6000 1146                391                      BRA     INVALID_OPCODE
0000133A                           392  
0000133A                           393  *-----------------------------------------------------------
0000133A  6100 13B8                394  FIRST_HEX_IS_0      BSR     GRAB_SECOND_HEX
0000133E                           395  
0000133E  1602                     396                      MOVE.B  D2, D3              ; Make copy of 2nd Hex Value
00001340  C63C 0001                397                      AND.B   #$1, D3             ; Check if odd
00001344  6600 01E4                398                      BNE     OPCODE_BCLR         ; If odd then OPCODE is BCLR
00001348  B43C 0000                399                      CMP.B   #$0, D2
0000134C  6700 0226                400                      BEQ     OPCODE_ORI          ; If 0 then OPCODE is ORI
00001350  B43C 000C                401                      CMP.B   #$C, D2
00001354  6700 0254                402                      BEQ     OPCODE_CMPI         ; If C then OPCODE is CMPI
00001358  6000 1124                403                      BRA     INVALID_OPCODE
0000135C                           404  
0000135C                           405  *-----------------------------------------------------------
0000135C  6100 1396                406  FIRST_HEX_IS_4      BSR     GRAB_SECOND_HEX
00001360                           407                  
00001360  1602                     408                      MOVE.B  D2, D3
00001362  C63C 0001                409                      AND.B   #$1, D3             
00001366  6600 03D2                410                      BNE     OPCODE_LEA          ; If odd then OPCODE is LEA
0000136A  B43C 0004                411                      CMP.B   #$4, D2
0000136E  6700 040A                412                      BEQ     OPCODE_NEG          ; If 4 then OPCODE is NEG
00001372  B43C 0008                413                      CMP.B   #$8, D2
00001376  6700 030A                414                      BEQ     OPCODE_MOVEM
0000137A  B43C 000C                415                      CMP.B   #$C, D2
0000137E  6700 0302                416                      BEQ     OPCODE_MOVEM        ; If 8 || C then OPCODE is MOVEM
00001382  B43C 000E                417                      CMP.B   #$E, D2
00001386  6700 00C6                418                      BEQ     OPCODE_RTS_JSR      ; If E then OPCODE is JSR or RTS
0000138A  6000 10F2                419                      BRA     INVALID_OPCODE      ; If not Odd, 4, 8, C, or E then bad Hex
0000138E                           420  
0000138E                           421  *-----------------------------------------------------------
0000138E  6100 1364                422  FIRST_HEX_IS_6      BSR     GRAB_SECOND_HEX
00001392                           423  
00001392  B43C 0000                424                      CMP.B   #$0, D2
00001396  6700 050A                425                      BEQ     OPCODE_BRA
0000139A  B43C 0005                426                      CMP.B   #$5, D2
0000139E  6700 04CA                427                      BEQ     OPCODE_BCS
000013A2  B43C 0008                428                      CMP.B   #$8, D2
000013A6  6700 04EC                429                      BEQ     OPCODE_BVC
000013AA  B43C 000C                430                      CMP.B   #$C, D2
000013AE  6700 04C8                431                      BEQ     OPCODE_BGE
000013B2  B43C 000D                432                      CMP.B   #$D, D2
000013B6  6700 04CE                433                      BEQ     OPCODE_BLT
000013BA  6000 10C2                434                      BRA     INVALID_OPCODE
000013BE                           435  
000013BE                           436  *-----------------------------------------------------------
000013BE  6100 1334                437  FIRST_HEX_IS_8      BSR     GRAB_SECOND_HEX
000013C2  6000 005E                438                      BRA     OPCODE_DIVS_OR
000013C6                           439  
000013C6                           440  *-----------------------------------------------------------
000013C6  6100 132C                441  FIRST_HEX_IS_B      BSR     GRAB_SECOND_HEX
000013CA                           442  
000013CA  1602                     443                      MOVE.B  D2, D3
000013CC  C63C 0001                444                      AND.B   #$1, D3
000013D0  6600 05EC                445                      BNE     OPCODE_EOR          ; If odd then OPCODE is EOR
000013D4  6000 0638                446                      BRA     OPCODE_CMP          ; If even then OPCODE is CMP
000013D8                           447  
000013D8                           448  *-----------------------------------------------------------
000013D8  6100 1340                449  FIRST_HEX_IS_D      BSR     GRAB_MID_BYTE
000013DC  6100 134E                450                      BSR     GRAB_OP
000013E0                           451  
000013E0  BA3C 0003                452                      CMP.B   #$3, D5
000013E4  6700 0708                453                      BEQ     OPCODE_ADDA
000013E8  BA3C 0007                454                      CMP.B   #$7, D5
000013EC  6700 0700                455                      BEQ     OPCODE_ADDA         ; If first opmode is 3 or 7 then it's not ADD
000013F0  6000 0694                456                      BRA     OPCODE_ADD
000013F4                           457                      
000013F4                           458  *-----------------------------------------------------------
000013F4  6100 12FE                459  FIRST_HEX_IS_E      BSR     GRAB_SECOND_HEX
000013F8                           460  
000013F8  1602                     461                      MOVE.B  D2, D3
000013FA  C63C 0001                462                      AND.B   #$1, D3
000013FE  6700 0060                463                      BEQ     OPCODE_LSR_ASR_ROR  ; If second hex is even then shift right
00001402  6000 00C0                464                      BRA     OPCODE_LSL_ASL_ROL  ; If odd then shift left
00001406                           465  
00001406                           466  *-----------------------------------------------------------        
00001406  6100 1312                467  OPCODE_MOVE_GROUP   BSR     GRAB_MID_BYTE
0000140A  6100 1320                468                      BSR     GRAB_OP
0000140E  6100 1314                469                      BSR     GRAB_LAST_BYTE
00001412  6100 1334                470                      BSR     GRAB_EA
00001416                           471                      
00001416  BA3C 0001                472                      CMP.B   #$1, D5             ; If second octal is 1 then it's MOVEA, else MOVE
0000141A  6700 0220                473                      BEQ     OPCODE_MOVEA
0000141E  6000 01C8                474                      BRA     OPCODE_MOVE
00001422                           475  
00001422                           476  *-----------------------------------------------------------        
00001422  6100 12DA                477  OPCODE_DIVS_OR      BSR     GRAB_THIRD_HEX
00001426                           478  
00001426  B43C 000E                479                      CMP.B   #$E, D2
0000142A  6700 0484                480                      BEQ     OPCODE_DIVS
0000142E  B43C 000F                481                      CMP.B   #$F, D2
00001432  6700 047C                482                      BEQ     OPCODE_DIVS
00001436  B43C 000C                483                      CMP.B   #$C, D2
0000143A  6700 1042                484                      BEQ     INVALID_OPCODE
0000143E  B43C 000D                485                      CMP.B   #$D, D2
00001442  6700 103A                486                      BEQ     INVALID_OPCODE
00001446                           487  
00001446  B43C 000C                488                      CMP.B   #$C, D2
0000144A  6D00 04A2                489                      BLT     OPCODE_OR                 
0000144E                           490                      
0000144E                           491  *-----------------------------------------------------------
0000144E  4283                     492  OPCODE_RTS_JSR      CLR.L   D3
00001450  6100 12AC                493                      BSR     GRAB_THIRD_HEX
00001454                           494  
00001454  B43C 0007                495                      CMP.B   #$7, D2
00001458  6700 03AC                496                      BEQ     OPCODE_RTS
0000145C  6000 0366                497                      BRA     OPCODE_JSR
00001460                           498                      
00001460                           499  *-----------------------------------------------------------
00001460  6100 12B8                500  OPCODE_LSR_ASR_ROR  BSR     GRAB_MID_BYTE       ; middle byte is masked to store the first and second
00001464  6100 12C6                501                      BSR     GRAB_OP             ; octal value ie. 0000 xxx|x xx00 0000, D4 and D5 respectively
00001468  6100 12BA                502                      BSR     GRAB_LAST_BYTE      ; Last byte is masked to store the third and fourth
0000146C  6100 12DA                503                      BSR     GRAB_EA             ; octal value ie. 0000 0000 00xx x|xxx, D6 and D7 respectively
00001470                           504                      
00001470  BA3C 0003                505                      CMP.B   #$3, D5             ; if second octal is 3 then it must be EA or INVALID_OPCODE
00001474  6700 0032                506                      BEQ     CHECK_R_EA
00001478                           507                                          
00001478  BC3C 0001                508                      CMP.B   #$1, D6             ; check second octal to determine LSR, ASR, ROR
0000147C  6700 06BE                509                      BEQ     OPCODE_LSR
00001480  BC3C 0005                510                      CMP.B   #$5, D6
00001484  6700 06B6                511                      BEQ     OPCODE_LSR
00001488  BC3C 0000                512                      CMP.B   #$0, D6
0000148C  6700 07CE                513                      BEQ     OPCODE_ASR
00001490  BC3C 0004                514                      CMP.B   #$4, D6
00001494  6700 07C6                515                      BEQ     OPCODE_ASR
00001498  BC3C 0003                516                      CMP.B   #$3, D6
0000149C  6700 08DE                517                      BEQ     OPCODE_ROR
000014A0  BC3C 0007                518                      CMP.B   #$7, D6
000014A4  6700 08D6                519                      BEQ     OPCODE_ROR
000014A8  B83C 0001                520  CHECK_R_EA          CMP.B   #$1, D4             ; check first octal to determine LSR, ASR, ROR
000014AC  6700 06EC                521                      BEQ     LOAD_LSR_EA
000014B0  B83C 0000                522                      CMP.B   #$0, D4
000014B4  6700 0804                523                      BEQ     LOAD_ASR_EA
000014B8  B83C 0003                524                      CMP.B   #$3, D4
000014BC  6700 091C                525                      BEQ     LOAD_ROR_EA
000014C0  6000 0FBC                526                      BRA     INVALID_OPCODE
000014C4                           527  
000014C4                           528  *-----------------------------------------------------------
000014C4  4283                     529  OPCODE_LSL_ASL_ROL  CLR.L   D3
000014C6                           530  
000014C6  6100 1252                531                      BSR     GRAB_MID_BYTE
000014CA  6100 1260                532                      BSR     GRAB_OP
000014CE  6100 1254                533                      BSR     GRAB_LAST_BYTE
000014D2  6100 1274                534                      BSR     GRAB_EA
000014D6                           535                      
000014D6  BA3C 0007                536                      CMP.B   #$7, D5             ; if second octal is 7 then it must be EA or INVALID_OPCODE
000014DA  6700 0032                537                      BEQ     CHECK_L_EA
000014DE                           538                      
000014DE  BC3C 0001                539                      CMP.B   #$1, D6
000014E2  6700 06E8                540                      BEQ     OPCODE_LSL
000014E6  BC3C 0005                541                      CMP.B   #$5, D6
000014EA  6700 06E0                542                      BEQ     OPCODE_LSL
000014EE  BC3C 0000                543                      CMP.B   #$0, D6
000014F2  6700 07F8                544                      BEQ     OPCODE_ASL
000014F6  BC3C 0004                545                      CMP.B   #$4, D6
000014FA  6700 07F0                546                      BEQ     OPCODE_ASL
000014FE  BC3C 0003                547                      CMP.B   #$3, D6
00001502  6700 0908                548                      BEQ     OPCODE_ROL
00001506  BC3C 0007                549                      CMP.B   #$7, D6
0000150A  6700 0900                550                      BEQ     OPCODE_ROL
0000150E  B83C 0001                551  CHECK_L_EA          CMP.B   #$1, D4
00001512  6700 0716                552                      BEQ     LOAD_LSL_EA
00001516  B83C 0000                553                      CMP.B   #$0, D4
0000151A  6700 082E                554                      BEQ     LOAD_ASL_EA
0000151E  B83C 0003                555                      CMP.B   #$3, D4
00001522  6700 0946                556                      BEQ     LOAD_ROL_EA
00001526  6000 0F56                557                      BRA     INVALID_OPCODE
0000152A                           558                      
0000152A                           559  *-----------------------------------------------------------
0000152A                           560  *------------------------OP_CODES---------------------------
0000152A                           561  *-----------------------------------------------------------
0000152A                           562  
0000152A                           563  **************************BCLR******************************
0000152A  6100 11D2                564  OPCODE_BCLR         BSR GRAB_THIRD_HEX
0000152E  B43C 0008                565                      CMP.B   #$8, D2
00001532  6D00 0F4A                566                      BLT     INVALID_OPCODE          ; If x < 8 
00001536  B43C 000C                567                      CMP.B   #$C, D2
0000153A  6C00 0F42                568                      BGE     INVALID_OPCODE          ; If x >= C 
0000153E                           569  
0000153E  6100 11DA                570                      BSR     GRAB_MID_BYTE           ; to get Register
00001542  6100 11E8                571                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
00001546  6100 11DC                572                      BSR     GRAB_LAST_BYTE          ; last BYTE contains <EA>
0000154A  6100 11FC                573                      BSR     GRAB_EA                 ; grab_EA.  D3 = Mode D4 = register
0000154E  6000 0002                574                      BRA     LOAD_BCLR
00001552                           575  
00001552                           576  
00001552  6100 0F58                577  LOAD_BCLR           BSR     PRINT_BCLR              ; Adds OPCODE name to Buffer
00001556  6100 0B46                578                      BSR     FIND_SIZE               ; Adds size (.B, .W, .L) to Buffer
0000155A  6100 0940                579                      BSR     FIND_EA_MODE            ; Adds EA Mode and Address to Buffer
0000155E  6100 1242                580                      BSR     OPCODE_BREAK            ; Adds ', ' to Buffer
00001562  12FC 0044                581                      MOVE.B  #'D', (A1)+
00001566  6100 0B18                582                      BSR     FIND_SRC_REG            ; Adds source register to Buffer
0000156A  6100 1240                583                      BSR     OPCODE_END              ; Adds Null terminator to Buffer
0000156E  6100 124C                584                      BSR     PRINT_BUFFER            ; Prints the OPCODE command
00001572  4E75                     585                      RTS
00001574                           586  
00001574                           587  **************************ORI*******************************
00001574  6100 1188                588  OPCODE_ORI          BSR     GRAB_THIRD_HEX          ; get the third hex and store in D2.
00001578  B43C 000C                589                      CMP.B   #$C, D2                 ; If C or greater, -> invalid
0000157C  6C00 0F00                590                      BGE     INVALID_OPCODE
00001580  6100 11A2                591                      BSR     GRAB_LAST_BYTE          ; last BYTE contains <EA>
00001584  6100 11C2                592                      BSR     GRAB_EA                 ; grab_EA.  D6 = Mode D7 = register
00001588  6000 0002                593                      BRA     LOAD_ORI
0000158C                           594              
0000158C  6100 0F10                595  LOAD_ORI            BSR     PRINT_ORI    
00001590  6100 0B0C                596                      BSR     FIND_SIZE
00001594  6100 0A86                597                      BSR     PRINT_IMMEDIATE
00001598  6100 1208                598                      BSR     OPCODE_BREAK
0000159C  6100 08FE                599                      BSR     FIND_EA_MODE
000015A0  6100 120A                600                      BSR     OPCODE_END
000015A4  6100 1216                601                      BSR     PRINT_BUFFER
000015A8  4E75                     602                      RTS
000015AA                           603  
000015AA                           604  **************************CMPI******************************
000015AA  6100 1152                605  OPCODE_CMPI         BSR     GRAB_THIRD_HEX          ; get the third hex and store in D2.
000015AE  B43C 000C                606                      CMP.B   #$C, D2
000015B2  6C00 0ECA                607                      BGE     INVALID_OPCODE          ; If x >= C
000015B6                           608              
000015B6  6100 1162                609                      BSR     GRAB_MID_BYTE           ; to get Register
000015BA  6100 1170                610                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
000015BE  6100 1164                611                      BSR     GRAB_LAST_BYTE          ; last BYTE contains <EA>
000015C2  6100 1184                612                      BSR     GRAB_EA                 ;  grab_EA.  D3 = Mode D4 = register
000015C6  6000 0002                613                      BRA     LOAD_CMPI 
000015CA                           614   
000015CA  6100 0EF2                615  LOAD_CMPI           BSR     PRINT_CMPI 
000015CE  6100 0ACE                616                      BSR     FIND_SIZE
000015D2  6100 0A48                617                      BSR     PRINT_IMMEDIATE
000015D6  6100 11CA                618                      BSR     OPCODE_BREAK
000015DA  6100 08C0                619                      BSR     FIND_EA_MODE
000015DE  6100 11CC                620                      BSR     OPCODE_END
000015E2  6100 11D8                621                      BSR     PRINT_BUFFER
000015E6  4E75                     622                      RTS
000015E8                           623  
000015E8                           624  
000015E8                           625  **************************MOVE******************************
000015E8  6100 10FC                626  OPCODE_MOVE         BSR     GRAB_FIRST_HEX      
000015EC  B43C 0001                627                      CMP.B   #$1, D2             ; size subroutine uses second octal, moves size
000015F0  6600 0006                628                      BNE     MOVE_WORD           ; is determined in the first hex value.
000015F4  1A3C 0000                629                      MOVE.B  #$0, D5             ; If 1 then size is 0 (Byte = 00)
000015F8  B43C 0003                630  MOVE_WORD           CMP.B   #$3, D2
000015FC  6600 0006                631                      BNE     MOVE_LONG
00001600  1A3C 0001                632                      MOVE.B  #$1, D5             ; If 3 then size is 1 (Word = 01)
00001604  B43C 0002                633  MOVE_LONG           CMP.B   #$2, D2
00001608  6600 0006                634                      BNE     LOAD_MOVE
0000160C  1A3C 0002                635                      MOVE.B  #$2, D5             ; If 2 then size is 2 (Long = 10)
00001610                           636                
00001610  6100 0FD2                637  LOAD_MOVE           BSR     PRINT_MOVE          ; Load 'MOVE' into buffer
00001614  6100 0A88                638                      BSR     FIND_SIZE           ; Load '.B', '.W', or '.L' into buffer
00001618  6100 0882                639                      BSR     FIND_EA_MODE        ; Load EA and register/address/literal into buffer
0000161C  6100 1184                640                      BSR     OPCODE_BREAK        ; Load ', ' into buffer
00001620  6100 10F8                641                      BSR     GRAB_MID_BYTE
00001624  6100 1106                642                      BSR     GRAB_OP
00001628  4283                     643                      CLR.L   D3
0000162A  163C 0001                644                      MOVE.B  #$1, D3             ; Flag to use first and second octals (instead of 
0000162E  6100 08A2                645                      BSR     FIND_EA_MODE_DST    ; third and fourth octals to determine EA)
00001632  6100 1178                646                      BSR     OPCODE_END          ; Add NULL terminator at the end of buffer
00001636  6100 1184                647                      BSR     PRINT_BUFFER        ; send buffer to console
0000163A  4E75                     648                      RTS                    
0000163C                           649  
0000163C                           650  **************************MOVEA*****************************
0000163C  6100 10A8                651  OPCODE_MOVEA        BSR     GRAB_FIRST_HEX
00001640  B43C 0001                652                      CMP.B   #$1, D2             ; MOVEA can't be BYTE size
00001644  6700 0E38                653                      BEQ     INVALID_OPCODE
00001648  B43C 0003                654                      CMP.B   #$3, D2
0000164C  6600 0006                655                      BNE     MOVEA_LONG
00001650  1A3C 0001                656                      MOVE.B  #$1, D5             ; Find_size makes 0 = .B, 1 = .W, and 2 = .L
00001654  B43C 0002                657  MOVEA_LONG          CMP.B   #$2, D2
00001658  6600 0006                658                      BNE     LOAD_MOVEA
0000165C  1A3C 0002                659                      MOVE.B  #$2, D5
00001660                           660                
00001660  6100 0F94                661  LOAD_MOVEA          BSR     PRINT_MOVEA         ; PRINT MOVEA
00001664  6100 0A38                662                      BSR     FIND_SIZE           
00001668  6100 0832                663                      BSR     FIND_EA_MODE
0000166C  6100 1134                664                      BSR     OPCODE_BREAK
00001670  12FC 0041                665                      MOVE.B  #'A', (A1)+         ; DST must be An
00001674  6100 0A0A                666                      BSR     FIND_SRC_REG
00001678  6100 1132                667                      BSR     OPCODE_END
0000167C  6100 113E                668                      BSR     PRINT_BUFFER
00001680  4E75                     669                      RTS
00001682                           670  
00001682                           671  **************************MOVEM*****************************
00001682  6100 1096                672  OPCODE_MOVEM        BSR     GRAB_MID_BYTE
00001686  6100 10A4                673                      BSR     GRAB_OP
0000168A  6100 1098                674                      BSR     GRAB_LAST_BYTE
0000168E  6100 10B8                675                      BSR     GRAB_EA
00001692                           676                      
00001692  BC3C 0000                677                      CMP.B   #$0, D6
00001696  6700 0DE6                678                      BEQ     INVALID_OPCODE
0000169A  BC3C 0001                679                      CMP.B   #$1, D6
0000169E  6700 0DDE                680                      BEQ     INVALID_OPCODE
000016A2  BC3C 0005                681                      CMP.B   #$5, D6
000016A6  6700 0DD6                682                      BEQ     INVALID_OPCODE
000016AA  BC3C 0006                683                      CMP.B   #$6, D6
000016AE  6700 0DCE                684                      BEQ     INVALID_OPCODE
000016B2  BC3C 0003                685                      CMP.B   #$3, D6
000016B6  6600 000A                686                      BNE     MOVEM_SIZE
000016BA  BE3C 0004                687                      CMP.B   #$4, D7
000016BE  6700 0DBE                688                      BEQ     INVALID_OPCODE
000016C2                           689            
000016C2  BA3C 0002                690  MOVEM_SIZE          CMP.B   #$2, D5
000016C6  6600 000A                691                      BNE     MOVEM_LONG
000016CA  1A3C 0001                692                      MOVE.B  #$1, D5
000016CE  6000 000E                693                      BRA     LOAD_MOVEM
000016D2  BA3C 0003                694  MOVEM_LONG          CMP.B   #$3, D5
000016D6  6600 0DA6                695                      BNE     INVALID_OPCODE          
000016DA  1A3C 0002                696                      MOVE.B  #$2, D5
000016DE  B83C 0006                697  LOAD_MOVEM          CMP.B   #$6, D4
000016E2  6700 0006                698                      BEQ     MEM_TO_REG              ; If first octal is 6 then MOVEM is memory to register
000016E6  6000 002A                699                      BRA     REG_TO_MEM              ; else it's register to memory
000016EA                           700                      
000016EA  BC3C 0004                701  MEM_TO_REG          CMP.B   #$4, D6
000016EE  6700 0D8E                702                      BEQ     INVALID_OPCODE
000016F2  6100 0DDC                703                      BSR     PRINT_MOVEM
000016F6  6100 09A6                704                      BSR     FIND_SIZE
000016FA  6100 07A0                705                      BSR     FIND_EA_MODE
000016FE  6100 10A2                706                      BSR     OPCODE_BREAK
00001702  3618                     707                      MOVE.W  (A0)+, D3               ; grab the next 16 bits that tell us which registers are saved to memory     
00001704  6100 0ADC                708                      BSR     PRINT_LIST              ; Prints list of registers being saved
00001708  6100 10A2                709                      BSR     OPCODE_END
0000170C  6100 10AE                710                      BSR     PRINT_BUFFER
00001710  4E75                     711                      RTS
00001712                           712                      
00001712  BC3C 0003                713  REG_TO_MEM          CMP.B   #$3, D6
00001716  6700 0D66                714                      BEQ     INVALID_OPCODE
0000171A  6100 0DB4                715                      BSR     PRINT_MOVEM
0000171E  6100 097E                716                      BSR     FIND_SIZE
00001722  3618                     717                      MOVE.W  (A0)+, D3
00001724  6100 0ABC                718                      BSR     PRINT_LIST
00001728  6100 1078                719                      BSR     OPCODE_BREAK
0000172C  6100 076E                720                      BSR     FIND_EA_MODE
00001730  6100 107A                721                      BSR     OPCODE_END
00001734  6100 1086                722                      BSR     PRINT_BUFFER
00001738  4E75                     723                      RTS
0000173A                           724                      
0000173A                           725                      
0000173A                           726  
0000173A                           727  **************************LEA*******************************
0000173A  4283                     728  OPCODE_LEA          CLR.L   D3                      ; Clear flag if it was set
0000173C                           729  
0000173C  6100 0FDC                730                      BSR     GRAB_MID_BYTE
00001740  6100 0FEA                731                      BSR     GRAB_OP
00001744  6100 0FDE                732                      BSR     GRAB_LAST_BYTE
00001748  6100 0FFE                733                      BSR     GRAB_EA
0000174C  BC3C 0002                734                      CMP.B   #$2, D6
00001750  6700 000A                735                      BEQ     LOAD_LEA
00001754  BC3C 0007                736                      CMP.B   #$7, D6
00001758  6700 0002                737                      BEQ     LOAD_LEA
0000175C                           738                      
0000175C                           739                      
0000175C  6100 0D88                740  LOAD_LEA            BSR     PRINT_LEA
00001760  6100 073A                741                      BSR     FIND_EA_MODE
00001764  6100 103C                742                      BSR     OPCODE_BREAK
00001768  12FC 0041                743                      MOVE.B  #'A', (A1)+
0000176C  6100 0912                744                      BSR     FIND_SRC_REG
00001770  6100 103A                745                      BSR     OPCODE_END
00001774  6100 1046                746                      BSR     PRINT_BUFFER
00001778  4E75                     747                      RTS
0000177A                           748  
0000177A                           749  **************************NEG*******************************
0000177A  6100 0F9E                750  OPCODE_NEG          BSR     GRAB_MID_BYTE
0000177E  6100 0FAC                751                      BSR     GRAB_OP
00001782  6100 0FA0                752                      BSR     GRAB_LAST_BYTE
00001786  6100 0FC0                753                      BSR     GRAB_EA
0000178A  6100 0F7C                754                      BSR     GRAB_FOURTH_HEX
0000178E                           755                      
0000178E  BC3C 0001                756                      CMP.B   #$1, D6
00001792  6700 0CEA                757                      BEQ     INVALID_OPCODE
00001796  BC3C 0005                758                      CMP.B   #$5, D6
0000179A  6700 0CE2                759                      BEQ     INVALID_OPCODE
0000179E  BC3C 0006                760                      CMP.B   #$6, D6
000017A2  6700 0CDA                761                      BEQ     INVALID_OPCODE
000017A6  B43C 003C                762                      CMP.B   #$3C, D2
000017AA  6C00 0CD2                763                      BGE     INVALID_OPCODE
000017AE                           764  
000017AE  6100 0D4C                765  LOAD_NEG            BSR     PRINT_NEG
000017B2  6100 08EA                766                      BSR     FIND_SIZE
000017B6  6100 06E4                767                      BSR     FIND_EA_MODE
000017BA  6100 0FF0                768                      BSR     OPCODE_END
000017BE  6100 0FFC                769                      BSR     PRINT_BUFFER
000017C2  4E75                     770                      RTS
000017C4                           771  
000017C4                           772  **************************JSR*******************************
000017C4  6100 0F54                773  OPCODE_JSR          BSR     GRAB_MID_BYTE
000017C8  6100 0F62                774                      BSR     GRAB_OP
000017CC  6100 0F56                775                      BSR     GRAB_LAST_BYTE
000017D0  6100 0F76                776                      BSR     GRAB_EA
000017D4                           777                      
000017D4  BA3C 0002                778                      CMP.B   #$2, D5
000017D8  6600 0CA4                779                      BNE     INVALID_OPCODE
000017DC  BC3C 0002                780                      CMP.B   #$2, D6
000017E0  6700 0012                781                      BEQ     LOAD_JSR
000017E4  BC3C 0007                782                      CMP.B   #$7, D6
000017E8  6600 0C94                783                      BNE     INVALID_OPCODE
000017EC  BE3C 0004                784                      CMP.B   #$4, D7
000017F0  6700 0C8C                785                      BEQ     INVALID_OPCODE
000017F4                           786                      
000017F4  6100 0D14                787  LOAD_JSR            BSR     PRINT_JSR
000017F8  6100 06A2                788                      BSR     FIND_EA_MODE
000017FC  6100 0FAE                789                      BSR     OPCODE_END
00001800  6100 0FBA                790                      BSR     PRINT_BUFFER
00001804  4E75                     791                      RTS
00001806                           792  
00001806                           793  **************************RTS*******************************
00001806  6100 0F00                794  OPCODE_RTS          BSR     GRAB_FOURTH_HEX
0000180A                           795  
0000180A  B43C 0005                796                      CMP.B   #$5, D2
0000180E  6600 0C6E                797                      BNE     INVALID_OPCODE
00001812                           798                      
00001812  6100 0D0C                799                      BSR     PRINT_RTS
00001816  6100 0F94                800                      BSR     OPCODE_END
0000181A  6100 0FA0                801                      BSR     PRINT_BUFFER
0000181E  4E75                     802                      RTS
00001820                           803  
00001820                           804  **************************SUBQ******************************
00001820  6100 0ED2                805  OPCODE_SUBQ         BSR     GRAB_SECOND_HEX
00001824  C43C 0001                806                      AND.B   #$1, D2                 ; Second hex must be odd
00001828  6700 0C54                807                      BEQ     INVALID_OPCODE
0000182C                           808                      
0000182C  6100 0EEC                809                      BSR     GRAB_MID_BYTE
00001830  6100 0EFA                810                      BSR     GRAB_OP
00001834  6100 0EEE                811                      BSR     GRAB_LAST_BYTE
00001838  6100 0F0E                812                      BSR     GRAB_EA
0000183C                           813                      
0000183C  6100 0EE6                814                      BSR     GRAB_LAST_BYTE
00001840  B43C 003C                815                      CMP.B   #$3C, D2                ; EA can't be literal
00001844  6C00 0C38                816                      BGE     INVALID_OPCODE
00001848                           817                      
00001848  6100 0CE8                818  LOAD_SUBQ           BSR     PRINT_SUBQ
0000184C  6100 0850                819                      BSR     FIND_SIZE
00001850  6100 0F60                820                      BSR     HEX                     ; Loads '#$' into Buffer
00001854  6100 082A                821                      BSR     FIND_SRC_REG
00001858  6100 0F48                822                      BSR     OPCODE_BREAK
0000185C  6100 063E                823                      BSR     FIND_EA_MODE
00001860  6100 0F4A                824                      BSR     OPCODE_END
00001864  6100 0F56                825                      BSR     PRINT_BUFFER
00001868  4E75                     826                      RTS
0000186A                           827  
0000186A                           828  **************************BCS*******************************
0000186A  6100 0EB8                829  OPCODE_BCS          BSR     GRAB_LAST_BYTE          
0000186E  6100 0CD4                830                      BSR     PRINT_BCS
00001872  6100 084C                831                      BSR     GET_DISPLACEMENT        ; Displacement determines the distance of branch and
00001876  4E75                     832                      RTS                             ; calculates the address
00001878                           833  
00001878                           834  **************************BGE*******************************
00001878  6100 0EAA                835  OPCODE_BGE          BSR     GRAB_LAST_BYTE
0000187C  6100 0CDC                836                      BSR     PRINT_BGE
00001880  6100 083E                837                      BSR     GET_DISPLACEMENT
00001884  4E75                     838                      RTS
00001886                           839  
00001886                           840  **************************BLT*******************************
00001886  6100 0E9C                841  OPCODE_BLT          BSR     GRAB_LAST_BYTE
0000188A  6100 0CE4                842                      BSR     PRINT_BLT
0000188E  6100 0830                843                      BSR     GET_DISPLACEMENT
00001892  4E75                     844                      RTS
00001894                           845  
00001894                           846  **************************BVC*******************************
00001894  6100 0E8E                847  OPCODE_BVC          BSR     GRAB_LAST_BYTE
00001898  6100 0CEC                848                      BSR     PRINT_BVC
0000189C  6100 0822                849                      BSR     GET_DISPLACEMENT
000018A0  4E75                     850                      RTS
000018A2                           851  
000018A2                           852  **************************BRA*******************************
000018A2  6100 0E80                853  OPCODE_BRA          BSR     GRAB_LAST_BYTE
000018A6  6100 0CF4                854                      BSR     PRINT_BRA
000018AA  6100 0814                855                      BSR     GET_DISPLACEMENT
000018AE  4E75                     856                      RTS
000018B0                           857  
000018B0                           858  **************************DIVS******************************
000018B0  6100 0E68                859  OPCODE_DIVS         BSR     GRAB_MID_BYTE
000018B4  6100 0E76                860                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
000018B8  6100 0E6A                861                      BSR     GRAB_LAST_BYTE
000018BC  6100 0E8A                862                      BSR     GRAB_EA                 ; EA MODE stored in D6, EA REG stored in D7
000018C0  6000 0002                863                      BRA     LOAD_DIVS         
000018C4                           864  
000018C4  BC3C 0001                865  LOAD_DIVS           CMP.B   #$1, D6
000018C8  6F00 0BB4                866                      BLE     INVALID_OPCODE
000018CC  6100 0CE4                867                      BSR     PRINT_DIVS
000018D0  6100 0B84                868                      BSR     PRINT_WORD
000018D4  6100 05C6                869                      BSR     FIND_EA_MODE
000018D8  6100 0EC8                870                      BSR     OPCODE_BREAK
000018DC  12FC 0044                871                      MOVE.B  #'D', (A1)+
000018E0  6100 079E                872                      BSR     FIND_SRC_REG
000018E4  6100 0EC6                873                      BSR     OPCODE_END
000018E8  6100 0ED2                874                      BSR     PRINT_BUFFER
000018EC  4E75                     875                      RTS 
000018EE                           876  
000018EE                           877  **************************OR********************************
000018EE  6100 0E2A                878  OPCODE_OR           BSR     GRAB_MID_BYTE
000018F2  6100 0E38                879                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
000018F6  6100 0E2C                880                      BSR     GRAB_LAST_BYTE
000018FA  6100 0E4C                881                      BSR     GRAB_EA                 ; EA MODE stored in D6, EA REG stored in D7
000018FE  BA3C 0004                882                      CMP.B   #$4, D5 
00001902  6D00 0006                883                      BLT     LOAD_OR 
00001906  6000 0024                884                      BRA     LOAD_OR_EA   
0000190A                           885   
0000190A                           886  
0000190A  6100 0CC0                887  LOAD_OR             BSR     PRINT_OR       
0000190E  6100 078E                888                      BSR     FIND_SIZE
00001912  6100 0588                889                      BSR     FIND_EA_MODE
00001916  6100 0E8A                890                      BSR     OPCODE_BREAK
0000191A  12FC 0044                891                      MOVE.B  #'D', (A1)+
0000191E  6100 0760                892                      BSR     FIND_SRC_REG
00001922  6100 0E88                893                      BSR     OPCODE_END
00001926  6100 0E94                894                      BSR     PRINT_BUFFER
0000192A  4E75                     895                      RTS                
0000192C                           896  
0000192C  BC3C 0001                897  LOAD_OR_EA         CMP.B   #$1, D6
00001930  6F00 0B4C                898                      BLE     INVALID_OPCODE
00001934  6100 0C96                899                      BSR     PRINT_OR       
00001938  6100 0764                900                      BSR     FIND_SIZE
0000193C  12FC 0044                901                      MOVE.B  #'D', (A1)+
00001940  6100 073E                902                      BSR     FIND_SRC_REG
00001944  6100 0E5C                903                      BSR     OPCODE_BREAK
00001948  6100 0552                904                      BSR     FIND_EA_MODE
0000194C  6100 0E5E                905                      BSR     OPCODE_END
00001950  6100 0E6A                906                      BSR     PRINT_BUFFER
00001954  4E75                     907                      RTS
00001956                           908  
00001956                           909  **************************SUB*******************************
00001956  6100 0DC2                910  OPCODE_SUB          BSR     GRAB_MID_BYTE
0000195A  6100 0DD0                911                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
0000195E  6100 0DC4                912                      BSR     GRAB_LAST_BYTE
00001962  6100 0DE4                913                      BSR     GRAB_EA                 ; EA MODE stored in D6, EA REG stored in D7
00001966  BA3C 0004                914                      CMP.B   #$4, D5                 ; If second octal is 0-3 then it uses datareg
0000196A  6D00 0006                915                      BLT     LOAD_SUB                
0000196E  6000 0024                916                      BRA     LOAD_SUB_EA             ; Else it uses EA
00001972                           917  
00001972  6100 0C62                918  LOAD_SUB            BSR     PRINT_SUB
00001976  6100 0726                919                      BSR     FIND_SIZE
0000197A  6100 0520                920                      BSR     FIND_EA_MODE
0000197E  6100 0E22                921                      BSR     OPCODE_BREAK
00001982  12FC 0044                922                      MOVE.B  #'D', (A1)+
00001986  6100 06F8                923                      BSR     FIND_SRC_REG
0000198A  6100 0E20                924                      BSR     OPCODE_END
0000198E  6100 0E2C                925                      BSR     PRINT_BUFFER
00001992  4E75                     926                      RTS                
00001994                           927  
00001994  BC3C 0001                928  LOAD_SUB_EA         CMP.B   #$1, D6                 ; Can't use address reg
00001998  6F00 0AE4                929                      BLE     INVALID_OPCODE
0000199C  6100 0C38                930                      BSR     PRINT_SUB
000019A0  6100 06FC                931                      BSR     FIND_SIZE
000019A4  12FC 0044                932                      MOVE.B  #'D', (A1)+
000019A8  6100 06D6                933                      BSR     FIND_SRC_REG
000019AC  6100 0DF4                934                      BSR     OPCODE_BREAK
000019B0  6100 04EA                935                      BSR     FIND_EA_MODE
000019B4  6100 0DF6                936                      BSR     OPCODE_END
000019B8  6100 0E02                937                      BSR     PRINT_BUFFER
000019BC  4E75                     938                      RTS                
000019BE                           939      
000019BE                           940  **************************EOR*******************************
000019BE  4283                     941  OPCODE_EOR          CLR.L   D3
000019C0  6100 0D58                942                      BSR     GRAB_MID_BYTE
000019C4  6100 0D66                943                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
000019C8  6100 0D5A                944                      BSR     GRAB_LAST_BYTE
000019CC  6100 0D7A                945                      BSR     GRAB_EA                 ; EA MODE stored in D6, EA REG stored in D7
000019D0                           946  
000019D0  BA3C 0004                947                      CMP.B   #$4, D5
000019D4  6D00 0AA8                948                      BLT     INVALID_OPCODE 
000019D8  BA3C 0007                949                      CMP.B   #$7, D5  
000019DC  6700 0AA0                950                      BEQ     INVALID_OPCODE     
000019E0  6000 0002                951                      BRA     LOAD_EOR             
000019E4                           952  
000019E4  BC3C 0001                953  LOAD_EOR            CMP.B   #$1, D6
000019E8  6700 0A94                954                      BEQ     INVALID_OPCODE
000019EC  6100 0C1E                955                      BSR     PRINT_EOR
000019F0  6100 06AC                956                      BSR     FIND_SIZE
000019F4  12FC 0044                957                      MOVE.B  #'D', (A1)+          
000019F8  6100 0686                958                      BSR     FIND_SRC_REG       
000019FC  6100 0DA4                959                      BSR     OPCODE_BREAK
00001A00  6100 049A                960                      BSR     FIND_EA_MODE
00001A04  6100 0DA6                961                      BSR     OPCODE_END
00001A08  6100 0DB2                962                      BSR     PRINT_BUFFER
00001A0C  4E75                     963                      RTS      
00001A0E                           964  
00001A0E                           965  **************************CMP*******************************
00001A0E  6100 0D0A                966  OPCODE_CMP          BSR     GRAB_MID_BYTE
00001A12  6100 0D18                967                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
00001A16  6100 0D0C                968                      BSR     GRAB_LAST_BYTE
00001A1A  6100 0D2C                969                      BSR     GRAB_EA                 ; EA MODE stored in D6, EA REG stored in D7
00001A1E  6000 0002                970                      BRA     LOAD_CMP
00001A22                           971  
00001A22  6100 0BF6                972  LOAD_CMP            BSR     PRINT_CMP
00001A26  6100 0676                973                      BSR     FIND_SIZE
00001A2A  6100 0470                974                      BSR     FIND_EA_MODE
00001A2E  6100 0D72                975                      BSR     OPCODE_BREAK
00001A32  12FC 0044                976                      MOVE.B  #'D', (A1)+
00001A36  6100 0648                977                      BSR     FIND_SRC_REG
00001A3A  6100 0D70                978                      BSR     OPCODE_END
00001A3E  6100 0D7C                979                      BSR     PRINT_BUFFER
00001A42  4E75                     980                      RTS
00001A44                           981  
00001A44                           982  **************************MULS******************************
00001A44  6100 0CD4                983  OPCODE_MULS         BSR     GRAB_MID_BYTE
00001A48  6100 0CE2                984                      BSR     GRAB_OP
00001A4C  6100 0CD6                985                      BSR     GRAB_LAST_BYTE
00001A50  6100 0CF6                986                      BSR     GRAB_EA
00001A54                           987                      
00001A54  BA3C 0007                988                      CMP.B   #$7, D5
00001A58  6600 0A24                989                      BNE     INVALID_OPCODE
00001A5C  BC3C 0002                990                      CMP.B   #$2, D6                     ; EA Mode can't be Address register
00001A60  6700 0A1C                991                      BEQ     INVALID_OPCODE
00001A64                           992                      
00001A64  1A3C 0001                993                      MOVE.B  #$1, D5                     ; Force MULS to size WORD
00001A68  6100 0BC6                994                      BSR     PRINT_MULS
00001A6C  6100 042E                995                      BSR     FIND_EA_MODE
00001A70  6100 0D30                996                      BSR     OPCODE_BREAK
00001A74  12FC 0044                997                      MOVE.B  #'D', (A1)+
00001A78  6100 0606                998                      BSR     FIND_SRC_REG
00001A7C  6100 0D2E                999                      BSR     OPCODE_END
00001A80  6100 0D3A               1000                      BSR     PRINT_BUFFER
00001A84  4E75                    1001                      RTS
00001A86                          1002  
00001A86                          1003  **************************ADD*******************************
00001A86  6100 0C92               1004  OPCODE_ADD          BSR     GRAB_MID_BYTE
00001A8A  6100 0CA0               1005                      BSR     GRAB_OP                 ; OP REG stored in D4, OP MODE stored in D5
00001A8E  6100 0C94               1006                      BSR     GRAB_LAST_BYTE
00001A92  6100 0CB4               1007                      BSR     GRAB_EA                 ; EA MODE stored in D6, EA REG stored in D7
00001A96  BA3C 0004               1008                      CMP.B   #$4, D5 
00001A9A  6D00 0006               1009                      BLT     LOAD_ADD
00001A9E  6000 0024               1010                      BRA     LOAD_ADD_EA 
00001AA2                          1011   
00001AA2                          1012  
00001AA2  6100 0BA6               1013  LOAD_ADD            BSR     PRINT_ADD   
00001AA6  6100 05F6               1014                      BSR     FIND_SIZE
00001AAA  6100 03F0               1015                      BSR     FIND_EA_MODE
00001AAE  6100 0CF2               1016                      BSR     OPCODE_BREAK
00001AB2  12FC 0044               1017                      MOVE.B  #'D', (A1)+
00001AB6  6100 05C8               1018                      BSR     FIND_SRC_REG
00001ABA  6100 0CF0               1019                      BSR     OPCODE_END
00001ABE  6100 0CFC               1020                      BSR     PRINT_BUFFER
00001AC2  4E75                    1021                      RTS                
00001AC4                          1022  
00001AC4  BC3C 0001               1023  LOAD_ADD_EA         CMP.B   #$1, D6
00001AC8  6F00 09B4               1024                      BLE     INVALID_OPCODE
00001ACC  6100 0B7C               1025                      BSR     PRINT_ADD   
00001AD0  6100 05CC               1026                      BSR     FIND_SIZE
00001AD4  12FC 0044               1027                      MOVE.B  #'D', (A1)+
00001AD8  6100 05A6               1028                      BSR     FIND_SRC_REG
00001ADC  6100 0CC4               1029                      BSR     OPCODE_BREAK
00001AE0  6100 03BA               1030                      BSR     FIND_EA_MODE
00001AE4  6100 0CC6               1031                      BSR     OPCODE_END
00001AE8  6100 0CD2               1032                      BSR     PRINT_BUFFER
00001AEC  4E75                    1033                      RTS
00001AEE                          1034  
00001AEE                          1035  **************************ADDA******************************
00001AEE  6100 0C2A               1036  OPCODE_ADDA         BSR     GRAB_MID_BYTE
00001AF2  6100 0C38               1037                      BSR     GRAB_OP             ; OP REG stored in D4, OP MODE stored in D5
00001AF6  6100 0C2C               1038                      BSR     GRAB_LAST_BYTE
00001AFA  6100 0C4C               1039                      BSR     GRAB_EA             ; EA MODE stored in D6, EA REG stored in D7
00001AFE                          1040                      
00001AFE  BA3C 0003               1041                      CMP.B   #$3, D5
00001B02  6600 000A               1042                      BNE     ADDA_LONG
00001B06  1A3C 0001               1043                      MOVE.B  #$1, D5
00001B0A  6000 000E               1044                      BRA     LOAD_ADDA
00001B0E  BA3C 0007               1045  ADDA_LONG           CMP.B   #$7, D5
00001B12  6600 096A               1046                      BNE     INVALID_OPCODE
00001B16  1A3C 0002               1047                      MOVE.B  #$2, D5
00001B1A                          1048                  
00001B1A  6100 0B44               1049  LOAD_ADDA           BSR     PRINT_ADDA  
00001B1E  6100 057E               1050                      BSR     FIND_SIZE
00001B22  6100 0378               1051                      BSR     FIND_EA_MODE
00001B26  6100 0C7A               1052                      BSR     OPCODE_BREAK
00001B2A  12FC 0041               1053                      MOVE.B  #'A', (A1)+
00001B2E  6100 0550               1054                      BSR     FIND_SRC_REG
00001B32  6100 0C78               1055                      BSR     OPCODE_END
00001B36  6100 0C84               1056                      BSR     PRINT_BUFFER
00001B3A  4E75                    1057                      RTS   
00001B3C                          1058  
00001B3C                          1059  **************************LSR*******************************
00001B3C  CC3C 0004               1060  OPCODE_LSR          AND.B   #$4, D6
00001B40  6600 0032               1061                      BNE     LOAD_LSR_REG
00001B44                          1062  
00001B44  B83C 0000               1063                      CMP.B   #$0, D4
00001B48  6600 0004               1064                      BNE     LOAD_LSR_COUNT
00001B4C  5004                    1065                      ADD.B   #$8, D4
00001B4E  6100 0B22               1066  LOAD_LSR_COUNT      BSR     PRINT_LSR
00001B52  6100 054A               1067                      BSR     FIND_SIZE
00001B56  6100 0C5A               1068                      BSR     HEX
00001B5A  6100 0524               1069                      BSR     FIND_SRC_REG
00001B5E  6100 0C42               1070                      BSR     OPCODE_BREAK
00001B62  12FC 0044               1071                      MOVE.B  #'D', (A1)+
00001B66  6100 0502               1072                      BSR     FIND_EA_REG
00001B6A  6100 0C40               1073                      BSR     OPCODE_END
00001B6E  6100 0C4C               1074                      BSR     PRINT_BUFFER
00001B72  4E75                    1075                      RTS
00001B74                          1076                      
00001B74  6100 0AFC               1077  LOAD_LSR_REG        BSR     PRINT_LSR
00001B78  6100 0524               1078                      BSR     FIND_SIZE
00001B7C  12FC 0044               1079                      MOVE.B  #'D', (A1)+
00001B80  6100 04FE               1080                      BSR     FIND_SRC_REG
00001B84  6100 0C1C               1081                      BSR     OPCODE_BREAK
00001B88  12FC 0044               1082                      MOVE.B  #'D', (A1)+
00001B8C  6100 04DC               1083                      BSR     FIND_EA_REG
00001B90  6100 0C1A               1084                      BSR     OPCODE_END
00001B94  6100 0C26               1085                      BSR     PRINT_BUFFER
00001B98  4E75                    1086                      RTS
00001B9A                          1087                      
00001B9A  B83C 0001               1088  LOAD_LSR_EA         CMP.B   #$1, D4
00001B9E  6600 08DE               1089                      BNE     INVALID_OPCODE
00001BA2  BC3C 0007               1090                      CMP.B   #$7, D6
00001BA6  6600 000A               1091                      BNE     LSR_GOOD
00001BAA  BE3C 0004               1092                      CMP.B   #$4, D7
00001BAE  6700 08CE               1093                      BEQ     INVALID_OPCODE
00001BB2  6100 0ABE               1094  LSR_GOOD            BSR     PRINT_LSR
00001BB6  12FC 0009               1095                      MOVE.B  #TAB, (A1)+             ; Loads tabs into buffer for appropriate spacing
00001BBA  12FC 0009               1096                      MOVE.B  #TAB, (A1)+
00001BBE  6100 02DC               1097                      BSR     FIND_EA_MODE
00001BC2  6100 0BE8               1098                      BSR     OPCODE_END
00001BC6  6100 0BF4               1099                      BSR     PRINT_BUFFER
00001BCA  4E75                    1100                      RTS
00001BCC                          1101  
00001BCC                          1102  **************************LSL*******************************
00001BCC  CC3C 0004               1103  OPCODE_LSL          AND.B   #$4, D6
00001BD0  6600 0032               1104                      BNE     LOAD_LSL_REG
00001BD4                          1105  
00001BD4  B83C 0000               1106                      CMP.B   #$0, D4
00001BD8  6600 0004               1107                      BNE     LOAD_LSL_COUNT
00001BDC  5004                    1108                      ADD.B   #$8, D4
00001BDE  6100 0AA0               1109  LOAD_LSL_COUNT      BSR     PRINT_LSL
00001BE2  6100 04BA               1110                      BSR     FIND_SIZE
00001BE6  6100 0BCA               1111                      BSR     HEX
00001BEA  6100 0494               1112                      BSR     FIND_SRC_REG
00001BEE  6100 0BB2               1113                      BSR     OPCODE_BREAK
00001BF2  12FC 0044               1114                      MOVE.B  #'D', (A1)+
00001BF6  6100 0472               1115                      BSR     FIND_EA_REG
00001BFA  6100 0BB0               1116                      BSR     OPCODE_END
00001BFE  6100 0BBC               1117                      BSR     PRINT_BUFFER
00001C02  4E75                    1118                      RTS
00001C04                          1119                      
00001C04  6100 0A7A               1120  LOAD_LSL_REG        BSR     PRINT_LSL
00001C08  6100 0494               1121                      BSR     FIND_SIZE
00001C0C  12FC 0044               1122                      MOVE.B  #'D', (A1)+
00001C10  6100 046E               1123                      BSR     FIND_SRC_REG
00001C14  6100 0B8C               1124                      BSR     OPCODE_BREAK
00001C18  12FC 0044               1125                      MOVE.B  #'D', (A1)+
00001C1C  6100 044C               1126                      BSR     FIND_EA_REG
00001C20  6100 0B8A               1127                      BSR     OPCODE_END
00001C24  6100 0B96               1128                      BSR     PRINT_BUFFER
00001C28  4E75                    1129                      RTS
00001C2A                          1130                      
00001C2A  B83C 0001               1131  LOAD_LSL_EA         CMP.B   #$1, D4
00001C2E  6600 084E               1132                      BNE     INVALID_OPCODE
00001C32  BC3C 0007               1133                      CMP.B   #$7, D6
00001C36  6600 000A               1134                      BNE     LSL_GOOD
00001C3A  BE3C 0004               1135                      CMP.B   #$4, D7
00001C3E  6700 083E               1136                      BEQ     INVALID_OPCODE
00001C42  6100 0A3C               1137  LSL_GOOD            BSR     PRINT_LSL
00001C46  12FC 0009               1138                      MOVE.B  #TAB, (A1)+
00001C4A  12FC 0009               1139                      MOVE.B  #TAB, (A1)+
00001C4E  6100 024C               1140                      BSR     FIND_EA_MODE
00001C52  6100 0B58               1141                      BSR     OPCODE_END
00001C56  6100 0B64               1142                      BSR     PRINT_BUFFER
00001C5A  4E75                    1143                      RTS
00001C5C                          1144                      
00001C5C                          1145  **************************ASR*******************************
00001C5C  CC3C 0004               1146  OPCODE_ASR          AND.B   #$4, D6
00001C60  6600 0032               1147                      BNE     LOAD_ASR_REG
00001C64                          1148  
00001C64  B83C 0000               1149                      CMP.B   #$0, D4
00001C68  6600 0004               1150                      BNE     LOAD_ASR_COUNT
00001C6C  5004                    1151                      ADD.B   #$8, D4
00001C6E  6100 0A1E               1152  LOAD_ASR_COUNT      BSR     PRINT_ASR
00001C72  6100 042A               1153                      BSR     FIND_SIZE
00001C76  6100 0B3A               1154                      BSR     HEX
00001C7A  6100 0404               1155                      BSR     FIND_SRC_REG
00001C7E  6100 0B22               1156                      BSR     OPCODE_BREAK
00001C82  12FC 0044               1157                      MOVE.B  #'D', (A1)+
00001C86  6100 03E2               1158                      BSR     FIND_EA_REG
00001C8A  6100 0B20               1159                      BSR     OPCODE_END
00001C8E  6100 0B2C               1160                      BSR     PRINT_BUFFER
00001C92  4E75                    1161                      RTS
00001C94                          1162                      
00001C94  6100 09F8               1163  LOAD_ASR_REG        BSR     PRINT_ASR
00001C98  6100 0404               1164                      BSR     FIND_SIZE
00001C9C  12FC 0044               1165                      MOVE.B  #'D', (A1)+
00001CA0  6100 03DE               1166                      BSR     FIND_SRC_REG
00001CA4  6100 0AFC               1167                      BSR     OPCODE_BREAK
00001CA8  12FC 0044               1168                      MOVE.B  #'D', (A1)+
00001CAC  6100 03BC               1169                      BSR     FIND_EA_REG
00001CB0  6100 0AFA               1170                      BSR     OPCODE_END
00001CB4  6100 0B06               1171                      BSR     PRINT_BUFFER
00001CB8  4E75                    1172                      RTS
00001CBA                          1173                      
00001CBA  B83C 0000               1174  LOAD_ASR_EA         CMP.B   #$0, D4
00001CBE  6600 07BE               1175                      BNE     INVALID_OPCODE
00001CC2  BC3C 0007               1176                      CMP.B   #$7, D6
00001CC6  6600 000A               1177                      BNE     ASR_GOOD
00001CCA  BE3C 0004               1178                      CMP.B   #$4, D7
00001CCE  6700 07AE               1179                      BEQ     INVALID_OPCODE
00001CD2  6100 09BA               1180  ASR_GOOD            BSR     PRINT_ASR
00001CD6  12FC 0009               1181                      MOVE.B  #TAB, (A1)+
00001CDA  12FC 0009               1182                      MOVE.B  #TAB, (A1)+
00001CDE  6100 01BC               1183                      BSR     FIND_EA_MODE
00001CE2  6100 0AC8               1184                      BSR     OPCODE_END
00001CE6  6100 0AD4               1185                      BSR     PRINT_BUFFER
00001CEA  4E75                    1186                      RTS
00001CEC                          1187  
00001CEC                          1188  
00001CEC                          1189  **************************ASL*******************************
00001CEC  CC3C 0004               1190  OPCODE_ASL          AND.B   #$4, D6
00001CF0  6600 0032               1191                      BNE     LOAD_ASL_REG
00001CF4                          1192  
00001CF4  B83C 0000               1193                      CMP.B   #$0, D4
00001CF8  6600 0004               1194                      BNE     LOAD_ASL_COUNT
00001CFC  5004                    1195                      ADD.B   #$8, D4
00001CFE  6100 099C               1196  LOAD_ASL_COUNT      BSR     PRINT_ASL
00001D02  6100 039A               1197                      BSR     FIND_SIZE
00001D06  6100 0AAA               1198                      BSR     HEX
00001D0A  6100 0374               1199                      BSR     FIND_SRC_REG
00001D0E  6100 0A92               1200                      BSR     OPCODE_BREAK
00001D12  12FC 0044               1201                      MOVE.B  #'D', (A1)+
00001D16  6100 0352               1202                      BSR     FIND_EA_REG
00001D1A  6100 0A90               1203                      BSR     OPCODE_END
00001D1E  6100 0A9C               1204                      BSR     PRINT_BUFFER
00001D22  4E75                    1205                      RTS
00001D24                          1206                      
00001D24  6100 0976               1207  LOAD_ASL_REG        BSR     PRINT_ASL
00001D28  6100 0374               1208                      BSR     FIND_SIZE
00001D2C  12FC 0044               1209                      MOVE.B  #'D', (A1)+
00001D30  6100 034E               1210                      BSR     FIND_SRC_REG
00001D34  6100 0A6C               1211                      BSR     OPCODE_BREAK
00001D38  12FC 0044               1212                      MOVE.B  #'D', (A1)+
00001D3C  6100 032C               1213                      BSR     FIND_EA_REG
00001D40  6100 0A6A               1214                      BSR     OPCODE_END
00001D44  6100 0A76               1215                      BSR     PRINT_BUFFER
00001D48  4E75                    1216                      RTS
00001D4A                          1217                      
00001D4A  B83C 0000               1218  LOAD_ASL_EA         CMP.B   #$0, D4
00001D4E  6600 072E               1219                      BNE     INVALID_OPCODE
00001D52  BC3C 0007               1220                      CMP.B   #$7, D6
00001D56  6600 000A               1221                      BNE     ASL_GOOD
00001D5A  BE3C 0004               1222                      CMP.B   #$4, D7
00001D5E  6700 071E               1223                      BEQ     INVALID_OPCODE
00001D62  6100 0938               1224  ASL_GOOD            BSR     PRINT_ASL
00001D66  12FC 0009               1225                      MOVE.B  #TAB, (A1)+
00001D6A  12FC 0009               1226                      MOVE.B  #TAB, (A1)+
00001D6E  6100 012C               1227                      BSR     FIND_EA_MODE
00001D72  6100 0A38               1228                      BSR     OPCODE_END
00001D76  6100 0A44               1229                      BSR     PRINT_BUFFER
00001D7A  4E75                    1230                      RTS
00001D7C                          1231  
00001D7C                          1232  
00001D7C                          1233  **************************ROR*******************************
00001D7C  CC3C 0004               1234  OPCODE_ROR          AND.B   #$4, D6
00001D80  6600 0032               1235                      BNE     LOAD_ROR_REG
00001D84                          1236  
00001D84  B83C 0000               1237                      CMP.B   #$0, D4
00001D88  6600 0004               1238                      BNE     LOAD_ROR_COUNT
00001D8C  5004                    1239                      ADD.B   #$8, D4
00001D8E  6100 091A               1240  LOAD_ROR_COUNT      BSR     PRINT_ROR
00001D92  6100 030A               1241                      BSR     FIND_SIZE
00001D96  6100 0A1A               1242                      BSR     HEX
00001D9A  6100 02E4               1243                      BSR     FIND_SRC_REG
00001D9E  6100 0A02               1244                      BSR     OPCODE_BREAK
00001DA2  12FC 0044               1245                      MOVE.B  #'D', (A1)+
00001DA6  6100 02C2               1246                      BSR     FIND_EA_REG
00001DAA  6100 0A00               1247                      BSR     OPCODE_END
00001DAE  6100 0A0C               1248                      BSR     PRINT_BUFFER
00001DB2  4E75                    1249                      RTS
00001DB4                          1250                      
00001DB4  6100 08F4               1251  LOAD_ROR_REG        BSR     PRINT_ROR
00001DB8  6100 02E4               1252                      BSR     FIND_SIZE
00001DBC  12FC 0044               1253                      MOVE.B  #'D', (A1)+
00001DC0  6100 02BE               1254                      BSR     FIND_SRC_REG
00001DC4  6100 09DC               1255                      BSR     OPCODE_BREAK
00001DC8  12FC 0044               1256                      MOVE.B  #'D', (A1)+
00001DCC  6100 029C               1257                      BSR     FIND_EA_REG
00001DD0  6100 09DA               1258                      BSR     OPCODE_END
00001DD4  6100 09E6               1259                      BSR     PRINT_BUFFER
00001DD8  4E75                    1260                      RTS
00001DDA                          1261                      
00001DDA  B83C 0003               1262  LOAD_ROR_EA         CMP.B   #$3, D4
00001DDE  6600 069E               1263                      BNE     INVALID_OPCODE
00001DE2  BC3C 0007               1264                      CMP.B   #$7, D6
00001DE6  6600 000A               1265                      BNE     ROR_GOOD
00001DEA  BE3C 0004               1266                      CMP.B   #$4, D7
00001DEE  6700 068E               1267                      BEQ     INVALID_OPCODE
00001DF2  6100 08B6               1268  ROR_GOOD            BSR     PRINT_ROR
00001DF6  12FC 0009               1269                      MOVE.B  #TAB, (A1)+
00001DFA  12FC 0009               1270                      MOVE.B  #TAB, (A1)+
00001DFE  6100 009C               1271                      BSR     FIND_EA_MODE
00001E02  6100 09A8               1272                      BSR     OPCODE_END
00001E06  6100 09B4               1273                      BSR     PRINT_BUFFER
00001E0A  4E75                    1274                      RTS
00001E0C                          1275  
00001E0C                          1276  
00001E0C                          1277  **************************ROL*******************************
00001E0C  CC3C 0004               1278  OPCODE_ROL          AND.B   #$4, D6
00001E10  6600 0032               1279                      BNE     LOAD_ROL_REG
00001E14                          1280  
00001E14  B83C 0000               1281                      CMP.B   #$0, D4
00001E18  6600 0004               1282                      BNE     LOAD_ROL_COUNT
00001E1C  5004                    1283                      ADD.B   #$8, D4
00001E1E  6100 0898               1284  LOAD_ROL_COUNT      BSR     PRINT_ROL
00001E22  6100 027A               1285                      BSR     FIND_SIZE
00001E26  6100 098A               1286                      BSR     HEX
00001E2A  6100 0254               1287                      BSR     FIND_SRC_REG
00001E2E  6100 0972               1288                      BSR     OPCODE_BREAK
00001E32  12FC 0044               1289                      MOVE.B  #'D', (A1)+
00001E36  6100 0232               1290                      BSR     FIND_EA_REG
00001E3A  6100 0970               1291                      BSR     OPCODE_END
00001E3E  6100 097C               1292                      BSR     PRINT_BUFFER
00001E42  4E75                    1293                      RTS
00001E44                          1294                      
00001E44  6100 0872               1295  LOAD_ROL_REG        BSR     PRINT_ROL
00001E48  6100 0254               1296                      BSR     FIND_SIZE
00001E4C  12FC 0044               1297                      MOVE.B  #'D', (A1)+
00001E50  6100 022E               1298                      BSR     FIND_SRC_REG
00001E54  6100 094C               1299                      BSR     OPCODE_BREAK
00001E58  12FC 0044               1300                      MOVE.B  #'D', (A1)+
00001E5C  6100 020C               1301                      BSR     FIND_EA_REG
00001E60  6100 094A               1302                      BSR     OPCODE_END
00001E64  6100 0956               1303                      BSR     PRINT_BUFFER
00001E68  4E75                    1304                      RTS
00001E6A                          1305                      
00001E6A  B83C 0003               1306  LOAD_ROL_EA         CMP.B   #$3, D4
00001E6E  6600 060E               1307                      BNE     INVALID_OPCODE
00001E72  BC3C 0007               1308                      CMP.B   #$7, D6
00001E76  6600 000A               1309                      BNE     ROL_GOOD
00001E7A  BE3C 0004               1310                      CMP.B   #$4, D7
00001E7E  6700 05FE               1311                      BEQ     INVALID_OPCODE
00001E82  6100 0834               1312  ROL_GOOD            BSR     PRINT_ROL
00001E86  12FC 0009               1313                      MOVE.B  #TAB, (A1)+
00001E8A  12FC 0009               1314                      MOVE.B  #TAB, (A1)+
00001E8E  6100 000C               1315                      BSR     FIND_EA_MODE
00001E92  6100 0918               1316                      BSR     OPCODE_END
00001E96  6100 0924               1317                      BSR     PRINT_BUFFER
00001E9A  4E75                    1318                      RTS
00001E9C                          1319  
00001E9C                          1320  ************************************************************
00001E9C                          1321  *FIND_EA_MODE: Using D6, it directs the flow to the 
00001E9C                          1322  *               appropriate Effective Address
00001E9C                          1323  *PRE-CONDITIONS: D6 must contain the EA mode octal value
00001E9C                          1324  *POST-CONDITIONS: Directs to appropriate effective address
00001E9C                          1325  *               and loads it into the Buffer
00001E9C                          1326  ************************************************************
00001E9C                          1327  
00001E9C  BC3C 0000               1328  FIND_EA_MODE        CMP.B   #$0, D6
00001EA0  6700 0066               1329                      BEQ     PRINT_DATAREG
00001EA4  BC3C 0001               1330                      CMP.B   #$1, D6
00001EA8  6700 0076               1331                      BEQ     PRINT_ADDREG
00001EAC  BC3C 0002               1332                      CMP.B   #$2, D6
00001EB0  6700 0086               1333                      BEQ     PRINT_INDIRECT
00001EB4  BC3C 0003               1334                      CMP.B   #$3, D6
00001EB8  6700 00A6               1335                      BEQ     PRINT_INDIRECT_POST
00001EBC  BC3C 0004               1336                      CMP.B   #$4, D6
00001EC0  6700 00CE               1337                      BEQ     PRINT_INDIRECT_PRE
00001EC4  BC3C 0007               1338                      CMP.B   #$7, D6
00001EC8  6700 00F2               1339                      BEQ     PRINT_SPECIAL
00001ECC  6000 05B0               1340                      BRA     INVALID_OPCODE
00001ED0  4E75                    1341  EA_MODE_FOUND       RTS
00001ED2                          1342  
00001ED2                          1343  ************************************************************
00001ED2                          1344  *FIND_EA_MODE_DST: Using D5, it directs the flow to the
00001ED2                          1345  *               appropriate Effective Address
00001ED2                          1346  *PRE-CONDITIONS: D5 must contain the DST EA mode octal value
00001ED2                          1347  *POST-CONDITIONS: Directs to appropriate effective address
00001ED2                          1348  *               and loads it into the Buffer
00001ED2                          1349  ************************************************************
00001ED2                          1350  
00001ED2  BA3C 0000               1351  FIND_EA_MODE_DST    CMP.B   #$0, D5
00001ED6  6700 0030               1352                      BEQ     PRINT_DATAREG
00001EDA  BA3C 0001               1353                      CMP.B   #$1, D5
00001EDE  6700 0040               1354                      BEQ     PRINT_ADDREG
00001EE2  BA3C 0002               1355                      CMP.B   #$2, D5
00001EE6  6700 0050               1356                      BEQ     PRINT_INDIRECT
00001EEA  BA3C 0003               1357                      CMP.B   #$3, D5
00001EEE  6700 0070               1358                      BEQ     PRINT_INDIRECT_POST
00001EF2  BA3C 0004               1359                      CMP.B   #$4, D5
00001EF6  6700 0098               1360                      BEQ     PRINT_INDIRECT_PRE
00001EFA  BA3C 0007               1361                      CMP.B   #$7, D5
00001EFE  6700 00D8               1362                      BEQ     PRINT_SPECIAL_DST
00001F02  6000 057A               1363                      BRA     INVALID_OPCODE
00001F06  4E75                    1364                      RTS
00001F08                          1365  
00001F08                          1366  ***********************PRINT_DATAREG************************
00001F08                          1367  
00001F08  12FC 0044               1368  PRINT_DATAREG       MOVE.B  #'D', (A1)+
00001F0C                          1369  
00001F0C  B63C 0001               1370                      CMP.B   #$1, D3                 ; flag to determine if DST EA Mode
00001F10  6700 0008               1371                      BEQ     PRINT_SRC_DATAREG
00001F14  6100 0154               1372                      BSR     FIND_EA_REG             ; Adds register of effective address to the Buffer
00001F18  60B6                    1373                      BRA     EA_MODE_FOUND
00001F1A                          1374                      
00001F1A  6100 0164               1375  PRINT_SRC_DATAREG   BSR     FIND_SRC_REG            ; Adds register of effective address in the src position
00001F1E  60B0                    1376                      BRA     EA_MODE_FOUND           ; to the buffer
00001F20                          1377  ***********************PRINT_ADDREG*************************
00001F20                          1378  
00001F20  12FC 0041               1379  PRINT_ADDREG        MOVE.B  #'A', (A1)+
00001F24                          1380  
00001F24  B63C 0001               1381                      CMP.B   #$1, D3
00001F28  6700 0008               1382                      BEQ     PRINT_SRC_ADDREG
00001F2C  6100 013C               1383                      BSR     FIND_EA_REG
00001F30  609E                    1384                      BRA     EA_MODE_FOUND
00001F32                          1385  
00001F32  6100 014C               1386  PRINT_SRC_ADDREG    BSR     FIND_SRC_REG
00001F36  6098                    1387                      BRA     EA_MODE_FOUND
00001F38                          1388  ***********************PRINT_INDIRECT***********************
00001F38                          1389  
00001F38  12FC 0028               1390  PRINT_INDIRECT      MOVE.B  #'(', (A1)+
00001F3C  12FC 0041               1391                      MOVE.B  #'A', (A1)+
00001F40                          1392                      
00001F40  B63C 0001               1393                      CMP.B   #$1, D3
00001F44  6700 000E               1394                      BEQ     PRINT_SRC_INDIRECT
00001F48  6100 0120               1395                      BSR     FIND_EA_REG
00001F4C  12FC 0029               1396                      MOVE.B  #')', (A1)+
00001F50  6000 FF7E               1397                      BRA     EA_MODE_FOUND
00001F54                          1398  
00001F54  6100 012A               1399  PRINT_SRC_INDIRECT  BSR     FIND_SRC_REG
00001F58  12FC 0029               1400                      MOVE.B  #')', (A1)+
00001F5C  6000 FF72               1401                      BRA     EA_MODE_FOUND
00001F60                          1402  ***********************PRINT_INDIRECT_POST******************
00001F60                          1403  
00001F60  12FC 0028               1404  PRINT_INDIRECT_POST MOVE.B  #'(', (A1)+
00001F64  12FC 0041               1405                      MOVE.B  #'A', (A1)+
00001F68                          1406                      
00001F68  B63C 0001               1407                      CMP.B   #$1, D3
00001F6C  6700 0012               1408                      BEQ     PRINT_SRC_IND_POST
00001F70  6100 00F8               1409                      BSR     FIND_EA_REG
00001F74  12FC 0029               1410                      MOVE.B  #')', (A1)+
00001F78  12FC 002B               1411                      MOVE.B  #'+', (A1)+
00001F7C  6000 FF52               1412                      BRA     EA_MODE_FOUND
00001F80                          1413  
00001F80  6100 00FE               1414  PRINT_SRC_IND_POST  BSR     FIND_SRC_REG
00001F84  12FC 0029               1415                      MOVE.B  #')', (A1)+
00001F88  12FC 002B               1416                      MOVE.B  #'+', (A1)+
00001F8C  6000 FF42               1417                      BRA     EA_MODE_FOUND
00001F90                          1418  ***********************PRINT_INDIRECT_PRE*******************
00001F90                          1419  
00001F90  12FC 002D               1420  PRINT_INDIRECT_PRE  MOVE.B  #'-', (A1)+
00001F94  12FC 0028               1421                      MOVE.B  #'(', (A1)+
00001F98  12FC 0041               1422                      MOVE.B  #'A', (A1)+
00001F9C                          1423                      
00001F9C  B63C 0001               1424                      CMP.B   #$1, D3
00001FA0  6700 000E               1425                      BEQ     PRINT_SRC_IND_PRE
00001FA4  6100 00C4               1426                      BSR     FIND_EA_REG
00001FA8  12FC 0029               1427                      MOVE.B  #')', (A1)+
00001FAC  6000 FF22               1428                      BRA     EA_MODE_FOUND
00001FB0                          1429  
00001FB0  6100 00CE               1430  PRINT_SRC_IND_PRE   BSR     FIND_SRC_REG
00001FB4  12FC 0029               1431                      MOVE.B  #')', (A1)+
00001FB8  6000 FF16               1432                      BRA     EA_MODE_FOUND
00001FBC                          1433  ***********************PRINT_SPECIAL************************
00001FBC                          1434  
00001FBC  BE3C 0000               1435  PRINT_SPECIAL       CMP.B   #$0, D7
00001FC0  6700 0032               1436                      BEQ     PRINT_DIRECT_W
00001FC4  BE3C 0001               1437                      CMP.B   #$1, D7
00001FC8  6700 003E               1438                      BEQ     PRINT_DIRECT_L
00001FCC  BE3C 0004               1439                      CMP.B   #$4, D7
00001FD0  6700 004A               1440                      BEQ     PRINT_IMMEDIATE
00001FD4  6000 04A8               1441                      BRA     INVALID_OPCODE
00001FD8                          1442  
00001FD8                          1443  ***********************PRINT_SPECIAL_DST********************
00001FD8                          1444  
00001FD8  B83C 0000               1445  PRINT_SPECIAL_DST   CMP.B   #$0, D4
00001FDC  6700 0016               1446                      BEQ     PRINT_DIRECT_W
00001FE0  B83C 0001               1447                      CMP.B   #$1, D4
00001FE4  6700 0022               1448                      BEQ     PRINT_DIRECT_L
00001FE8  B83C 0004               1449                      CMP.B   #$4, D4
00001FEC  6700 002E               1450                      BEQ     PRINT_IMMEDIATE
00001FF0  6000 048C               1451                      BRA     INVALID_OPCODE
00001FF4                          1452                      
00001FF4                          1453  ***********************PRINT_DIRECT_W***********************
00001FF4                          1454  
00001FF4  12FC 0024               1455  PRINT_DIRECT_W      MOVE.B  #'$', (A1)+             ; Adds hex symbol to Buffer
00001FF8  3C48                    1456                      MOVE.W  A0, A6                  ; Grabs address that holds direct value
00001FFA  BCD8                    1457                      CMP.W   (A0)+, A6               ; moves the pointer
00001FFC  163C 0001               1458                      MOVE.B  #1, D3                  ; Grabs 2 bytes of data
00002000  6100 F11A               1459                      BSR     GRAB_DATA               ; Converts the address to be displayed in hex
00002004  6000 FECA               1460                      BRA     EA_MODE_FOUND
00002008                          1461  
00002008                          1462  ***********************PRINT_DIRECT_L***********************
00002008                          1463  
00002008  12FC 0024               1464  PRINT_DIRECT_L      MOVE.B  #'$', (A1)+
0000200C  2C48                    1465                      MOVE.L  A0, A6
0000200E  BDD8                    1466                      CMP.L   (A0)+, A6
00002010  163C 0003               1467                      MOVE.B  #3, D3                  ; Grabs 4 bytes of data
00002014  6100 F106               1468                      BSR     GRAB_DATA
00002018  6000 FEB6               1469                      BRA     EA_MODE_FOUND
0000201C                          1470  
0000201C                          1471  ***********************PRINT_IMMEDIATE**********************
0000201C                          1472  
0000201C  6100 0794               1473  PRINT_IMMEDIATE     BSR     HEX
00002020  6100 0074               1474                      BSR     GET_SIZE
00002024  B07C 0000               1475                      CMP     #$0, D0
00002028  6700 000E               1476                      BEQ     PRINT_IMMEDIATE_B
0000202C  B07C 0001               1477                      CMP     #$1, D0
00002030  6700 0018               1478                      BEQ     PRINT_IMMEDIATE_W
00002034  6000 0024               1479                      BRA     PRINT_IMMEDIATE_L
00002038                          1480  
00002038                          1481  ***********************PRINT_IMMEDIATE_B********************
00002038                          1482  
00002038  3C48                    1483  PRINT_IMMEDIATE_B   MOVE.W  A0, A6
0000203A  BCD8                    1484                      CMP.W   (A0)+, A6
0000203C  161E                    1485                      MOVE.B  (A6)+, D3               ; Grabs 1 byte of data
0000203E  163C 0000               1486                      MOVE.B  #$0, D3
00002042  6100 F0D8               1487                      BSR     GRAB_DATA
00002046  6000 FE88               1488                      BRA     EA_MODE_FOUND
0000204A                          1489  
0000204A                          1490  ***********************PRINT_IMMEDIATE_W********************
0000204A                          1491  
0000204A  3C48                    1492  PRINT_IMMEDIATE_W   MOVE.W  A0, A6
0000204C  BCD8                    1493                      CMP.W   (A0)+, A6
0000204E  163C 0001               1494                      MOVE.B  #1, D3                  ; Grabs 2 byte of data
00002052  6100 F0C8               1495                      BSR     GRAB_DATA
00002056  6000 FE78               1496                      BRA     EA_MODE_FOUND
0000205A                          1497  
0000205A                          1498  ***********************PRINT_IMMEDIATE_L********************
0000205A                          1499  
0000205A  2C48                    1500  PRINT_IMMEDIATE_L   MOVE.L  A0, A6
0000205C  BCD8                    1501                      CMP.W   (A0)+, A6
0000205E  163C 0003               1502                      MOVE.B  #3, D3                  ; Grabs 4 byte of data
00002062  6100 F0B8               1503                      BSR     GRAB_DATA
00002066  6000 FE68               1504                      BRA     EA_MODE_FOUND
0000206A                          1505  
0000206A                          1506  
0000206A                          1507  ************************************************************
0000206A                          1508  *FIND_EA_REG: Takes the decimal value in D7 and converts it
0000206A                          1509  *               to hex.
0000206A                          1510  *PRE-CONDITIONS: D7 must contain the register octal for EA
0000206A                          1511  *POST-CONDITIONS: Converts the value in hex, so it can be 
0000206A                          1512  *               displayed appropriately
0000206A                          1513  ************************************************************
0000206A                          1514  
0000206A  BE3C 0008               1515  FIND_EA_REG         CMP.B   #$8, D7             ; D7 will always be lower than 8
0000206E  6F00 0008               1516                      BLE     PRINT_EA            ; 8 is for shifting count = 0
00002072  6000 040A               1517                      BRA     INVALID_OPCODE
00002076  4E75                    1518  EA_REG_FOUND        RTS
00002078                          1519  
00002078                          1520  ***********************PRINT_EA*****************************
00002078                          1521  
00002078  0607 0030               1522  PRINT_EA            ADD.B   #$30, D7            ; decimal < 10 + 30 = value in hex
0000207C  12C7                    1523                      MOVE.B  D7, (A1)+           ; Add value to Buffer
0000207E  60F6                    1524                      BRA     EA_REG_FOUND
00002080                          1525  
00002080                          1526  ************************************************************
00002080                          1527  *FIND_SRC_REG: Takes the decimal value in D4 and converts it
00002080                          1528  *               to hex.
00002080                          1529  *PRE-CONDITIONS: D4 must contain the register octal for DST
00002080                          1530  *               (Messed up naming convention, to late to fix)
00002080                          1531  *POST-CONDITIONS: Converts the value in hex, so it can be 
00002080                          1532  *               displayed appropriately
00002080                          1533  ************************************************************
00002080                          1534  
00002080  B83C 0008               1535  FIND_SRC_REG        CMP.B   #$8, D4
00002084  6F00 0008               1536                      BLE     PRINT_SRC
00002088  6000 03F4               1537                      BRA     INVALID_OPCODE
0000208C  4E75                    1538  SRC_REG_FOUND       RTS
0000208E                          1539                      
0000208E                          1540  ***********************PRINT_SRC****************************
0000208E                          1541  
0000208E  0604 0030               1542  PRINT_SRC           ADD.B   #$30, D4
00002092  12C4                    1543                      MOVE.B  D4, (A1)+
00002094  60F6                    1544                      BRA     SRC_REG_FOUND
00002096                          1545  
00002096                          1546  ************************************************************
00002096                          1547  *GET_SIZE: First 2 LSB in D5 contain the size of an OPCODE
00002096                          1548  *PRE-CONDITIONS: D5 must will have a value less than 7 that
00002096                          1549  *               represents the size
00002096                          1550  *POST-CONDITIONS: Masks the size to a standard convention
00002096                          1551  ************************************************************
00002096                          1552  
00002096  3005                    1553  GET_SIZE            MOVE.W  D5, D0
00002098  C03C 0003               1554                      AND.B   #$3, D0
0000209C  4E75                    1555                      RTS
0000209E                          1556  
0000209E                          1557  ************************************************************
0000209E                          1558  *FIND_SIZE: Takes the value from D5 and determines the 
0000209E                          1559  *               appropriate size of the OPCODE
0000209E                          1560  *PRE-CONDITIONS: D5 must contain a value less than 3
0000209E                          1561  *POST-CONDITIONS: Prints .B when D5 is 0, .W when D5 is 1
0000209E                          1562  *                and .L when D5 is 2
0000209E                          1563  ************************************************************
0000209E                          1564  
0000209E  CA3C 0003               1565  FIND_SIZE           AND.B   #$03, D5
000020A2  BA3C 0000               1566                      CMP.B   #0, D5
000020A6  6700 039A               1567                      BEQ     PRINT_BYTE
000020AA  BA3C 0001               1568                      CMP.B   #1, D5
000020AE  6700 03A6               1569                      BEQ     PRINT_WORD
000020B2  BA3C 0002               1570                      CMP.B   #2, D5
000020B6  6700 03B2               1571                      BEQ     PRINT_LONG
000020BA  6000 03C2               1572                      BRA     INVALID_OPCODE
000020BE  4E75                    1573  SIZE_FOUND          RTS
000020C0                          1574                                          
000020C0                          1575  ************************************************************
000020C0                          1576  *GET_DISPLACEMENT: Determines the distance of a branch and
000020C0                          1577  *               prints the address that the branch will move to
000020C0                          1578  *PRE-CONDITIONS: A0 points to the next address.
000020C0                          1579  *POST-CONDITIONS: Branches are printed with their destination
000020C0                          1580  *               address.
000020C0                          1581  ************************************************************
000020C0                          1582  
000020C0  6100 0662               1583  GET_DISPLACEMENT    BSR     GRAB_LAST_BYTE
000020C4  B43C 0000               1584                      CMP.B   #$00, D2                ; check if displacement is 16 bit
000020C8  6700 0068               1585                      BEQ     WORD_DISPLACEMENT
000020CC  B43C 00FF               1586                      CMP.B   #$FF, D2                ; Check if displacement is 32 bit
000020D0  6700 00B6               1587                      BEQ     LONG_DISPLACEMENT
000020D4  6000 000C               1588                      BRA     BYTE_DISPLACEMENT
000020D8  6100 06D2               1589  FOUND_DISPLACEMENT  BSR     OPCODE_END
000020DC  6100 06DE               1590                      BSR     PRINT_BUFFER
000020E0  4E75                    1591                      RTS
000020E2                          1592                      
000020E2                          1593  ***********************BYTE_DISPLACEMENT********************
000020E2                          1594  
000020E2  23C8 000027EE           1595  BYTE_DISPLACEMENT   MOVE.L  A0, CURRENT_ADD
000020E8  B43C 0080               1596                      CMP.B   #$80, D2                ; check if leading bit is negative
000020EC  6500 0006               1597                      BCS     POS_BYTE                ; if carry set then displacment is positive
000020F0  6000 001C               1598                      BRA     NEG_BYTE                ; else it's negative
000020F4                          1599                      
000020F4  163C 0003               1600  POS_BYTE            MOVE.B  #$3, D3                 ; grabs Long size address
000020F8  D5B9 000027EE           1601                      ADD.L   D2, CURRENT_ADD         ; D2 contains displacement in hex
000020FE  6100 06B2               1602                      BSR     HEX
00002102  4DF9 000027EE           1603                      LEA     CURRENT_ADD, A6         ; position branch address to be converted
00002108  6100 F012               1604                      BSR     GRAB_DATA               ; converts address in A6 to hex
0000210C  60CA                    1605                      BRA     FOUND_DISPLACEMENT
0000210E                          1606  
0000210E  163C 0003               1607  NEG_BYTE            MOVE.B  #$3, D3
00002112  0A02 00FF               1608                      EOR.B   #$FF, D2                ; if negative, perform 2's complement
00002116  95B9 000027EE           1609                      SUB.L   D2, CURRENT_ADD         ; subtract two's complement from current address
0000211C  53B9 000027EE           1610                      SUB.L   #$1, CURRENT_ADD        ; to make address even
00002122  6100 068E               1611                      BSR     HEX
00002126  4DF9 000027EE           1612                      LEA     CURRENT_ADD, A6
0000212C  6100 EFEE               1613                      BSR     GRAB_DATA
00002130  60A6                    1614                      BRA     FOUND_DISPLACEMENT
00002132                          1615  
00002132                          1616  ***********************WORD_DISPLACEMENT********************
00002132                          1617  
00002132  23C8 000027EE           1618  WORD_DISPLACEMENT   MOVE.L  A0, CURRENT_ADD
00002138  3418                    1619                      MOVE.W  (A0)+, D2               ; store word size address into D2
0000213A  B47C 8000               1620                      CMP.W   #$8000, D2              ; check if negative or positive
0000213E  6500 0006               1621                      BCS     POS_WORD
00002142  6000 001E               1622                      BRA     NEG_WORD
00002146                          1623  
00002146  163C 0003               1624  POS_WORD            MOVE.B  #$3, D3
0000214A  D5B9 000027EE           1625                      ADD.L   D2, CURRENT_ADD
00002150  6100 0660               1626                      BSR     HEX
00002154  4DF9 000027EE           1627                      LEA     CURRENT_ADD, A6
0000215A  6100 EFC0               1628                      BSR     GRAB_DATA
0000215E  6000 FF78               1629                      BRA     FOUND_DISPLACEMENT
00002162                          1630                      
00002162  163C 0003               1631  NEG_WORD            MOVE.B  #$3, D3
00002166  0A42 FFFF               1632                      EOR.W   #$FFFF, D2
0000216A  95B9 000027EE           1633                      SUB.L   D2, CURRENT_ADD
00002170  53B9 000027EE           1634                      SUB.L   #$1, CURRENT_ADD
00002176  6100 063A               1635                      BSR     HEX
0000217A  4DF9 000027EE           1636                      LEA     CURRENT_ADD, A6
00002180  6100 EF9A               1637                      BSR     GRAB_DATA
00002184  6000 FF52               1638                      BRA     FOUND_DISPLACEMENT
00002188                          1639                      
00002188                          1640  ***********************LONG_DISPLACEMENT********************
00002188                          1641  
00002188  23C8 000027EE           1642  LONG_DISPLACEMENT   MOVE.L  A0, CURRENT_ADD
0000218E  2418                    1643                      MOVE.L  (A0)+, D2               ; store long address into D2
00002190  B4BC 80000000           1644                      CMP.L   #$80000000, D2          ; check if negative or positive
00002196  6500 0006               1645                      BCS     POS_LONG                
0000219A  6000 001E               1646                      BRA     NEG_LONG
0000219E                          1647  
0000219E  163C 0003               1648  POS_LONG            MOVE.B  #$3, D3
000021A2  D5B9 000027EE           1649                      ADD.L   D2, CURRENT_ADD
000021A8  6100 0608               1650                      BSR     HEX
000021AC  4DF9 000027EE           1651                      LEA     CURRENT_ADD, A6
000021B2  6100 EF68               1652                      BSR     GRAB_DATA
000021B6  6000 FF20               1653                      BRA     FOUND_DISPLACEMENT
000021BA                          1654                      
000021BA  163C 0003               1655  NEG_LONG            MOVE.B  #$3, D3
000021BE  0A82 FFFFFFFF           1656                      EOR.L   #$FFFFFFFF, D2
000021C4  95B9 000027EE           1657                      SUB.L   D2, CURRENT_ADD
000021CA  53B9 000027EE           1658                      SUB.L   #$1, CURRENT_ADD
000021D0  6100 05E0               1659                      BSR     HEX
000021D4  4DF9 000027EE           1660                      LEA     CURRENT_ADD, A6
000021DA  6100 EF40               1661                      BSR     GRAB_DATA
000021DE  6000 FEF8               1662                      BRA     FOUND_DISPLACEMENT
000021E2                          1663  
000021E2                          1664  ************************************************************
000021E2                          1665  *PRINT_LIST: Adds the list of registers (used by MOVEM) to
000021E2                          1666  *               the buffer to be printed
000021E2                          1667  *PRE-CONDITIONS: D3 is clear.
000021E2                          1668  *POST-CONDITIONS: Buffer contains registers that are being 
000021E2                          1669  *               saved or restored with MOVEM
000021E2                          1670  ************************************************************
000021E2                          1671  
000021E2  BC3C 0004               1672  PRINT_LIST          CMP.B   #$4, D6             ; If EA mode is 4 then it uses pre-decrement
000021E6  6700 0124               1673                      BEQ     PRE_DEC
000021EA                          1674                      
000021EA  E24B                    1675                      LSR.W   #$1, D3             ; Shift right to capture LSB, Register is read from right to left
000021EC  6400 000E               1676                      BCC     PRE_D1              ; If bit is 0 move to the next register
000021F0  6100 023C               1677                      BSR     LIST_HELPER         ; Adds back slashes to buffer if needed
000021F4  12FC 0044               1678                      MOVE.B  #'D', (A1)+         ; Add register to buffer
000021F8  12FC 0030               1679                      MOVE.B  #'0', (A1)+
000021FC  E24B                    1680  PRE_D1              LSR.W   #$1, D3             ; shift left again to capture MSB
000021FE  6400 000E               1681                      BCC     PRE_D2              ; repeat process until all registers are accounted for
00002202  6100 022A               1682                      BSR     LIST_HELPER
00002206  12FC 0044               1683                      MOVE.B  #'D', (A1)+
0000220A  12FC 0031               1684                      MOVE.B  #'1', (A1)+
0000220E  E24B                    1685  PRE_D2              LSR.W   #$1, D3
00002210  6400 000E               1686                      BCC     PRE_D3
00002214  6100 0218               1687                      BSR     LIST_HELPER
00002218  12FC 0044               1688                      MOVE.B  #'D', (A1)+
0000221C  12FC 0032               1689                      MOVE.B  #'2', (A1)+
00002220  E24B                    1690  PRE_D3              LSR.W   #$1, D3
00002222  6400 000E               1691                      BCC     PRE_D4
00002226  6100 0206               1692                      BSR     LIST_HELPER
0000222A  12FC 0044               1693                      MOVE.B  #'D', (A1)+
0000222E  12FC 0033               1694                      MOVE.B  #'3', (A1)+
00002232  E24B                    1695  PRE_D4              LSR.W   #$1, D3
00002234  6400 000E               1696                      BCC     PRE_D5
00002238  6100 01F4               1697                      BSR     LIST_HELPER
0000223C  12FC 0044               1698                      MOVE.B  #'D', (A1)+
00002240  12FC 0034               1699                      MOVE.B  #'4', (A1)+
00002244  E24B                    1700  PRE_D5              LSR.W   #$1, D3
00002246  6400 000E               1701                      BCC     PRE_D6
0000224A  6100 01E2               1702                      BSR     LIST_HELPER
0000224E  12FC 0044               1703                      MOVE.B  #'D', (A1)+
00002252  12FC 0035               1704                      MOVE.B  #'5', (A1)+
00002256  E24B                    1705  PRE_D6              LSR.W   #$1, D3
00002258  6400 000E               1706                      BCC     PRE_D7
0000225C  6100 01D0               1707                      BSR     LIST_HELPER
00002260  12FC 0044               1708                      MOVE.B  #'D', (A1)+
00002264  12FC 0036               1709                      MOVE.B  #'6', (A1)+
00002268  E24B                    1710  PRE_D7              LSR.W   #$1, D3
0000226A  6400 000E               1711                      BCC     PRE_A0
0000226E  6100 01BE               1712                      BSR     LIST_HELPER
00002272  12FC 0044               1713                      MOVE.B  #'D', (A1)+
00002276  12FC 0037               1714                      MOVE.B  #'7', (A1)+
0000227A  E24B                    1715  PRE_A0              LSR.W   #$1, D3
0000227C  6400 000E               1716                      BCC     PRE_A1
00002280  6100 01AC               1717                      BSR     LIST_HELPER
00002284  12FC 0041               1718                      MOVE.B  #'A', (A1)+
00002288  12FC 0030               1719                      MOVE.B  #'0', (A1)+
0000228C  E24B                    1720  PRE_A1              LSR.W   #$1, D3
0000228E  6400 000E               1721                      BCC     PRE_A2
00002292  6100 019A               1722                      BSR     LIST_HELPER
00002296  12FC 0041               1723                      MOVE.B  #'A', (A1)+
0000229A  12FC 0031               1724                      MOVE.B  #'1', (A1)+
0000229E  E24B                    1725  PRE_A2              LSR.W   #$1, D3
000022A0  6400 000E               1726                      BCC     PRE_A3
000022A4  6100 0188               1727                      BSR     LIST_HELPER
000022A8  12FC 0041               1728                      MOVE.B  #'A', (A1)+
000022AC  12FC 0032               1729                      MOVE.B  #'2', (A1)+
000022B0  E24B                    1730  PRE_A3              LSR.W   #$1, D3
000022B2  6400 000E               1731                      BCC     PRE_A4
000022B6  6100 0176               1732                      BSR     LIST_HELPER
000022BA  12FC 0041               1733                      MOVE.B  #'A', (A1)+
000022BE  12FC 0033               1734                      MOVE.B  #'3', (A1)+
000022C2  E24B                    1735  PRE_A4              LSR.W   #$1, D3
000022C4  6400 000E               1736                      BCC     PRE_A5
000022C8  6100 0164               1737                      BSR     LIST_HELPER
000022CC  12FC 0041               1738                      MOVE.B  #'A', (A1)+
000022D0  12FC 0034               1739                      MOVE.B  #'4', (A1)+
000022D4  E24B                    1740  PRE_A5              LSR.W   #$1, D3
000022D6  6400 000E               1741                      BCC     PRE_A6
000022DA  6100 0152               1742                      BSR     LIST_HELPER
000022DE  12FC 0041               1743                      MOVE.B  #'A', (A1)+
000022E2  12FC 0035               1744                      MOVE.B  #'5', (A1)+
000022E6  E24B                    1745  PRE_A6              LSR.W   #$1, D3
000022E8  6400 000E               1746                      BCC     PRE_A7
000022EC  6100 0140               1747                      BSR     LIST_HELPER
000022F0  12FC 0041               1748                      MOVE.B  #'A', (A1)+
000022F4  12FC 0036               1749                      MOVE.B  #'6', (A1)+
000022F8  E24B                    1750  PRE_A7              LSR.W   #$1, D3
000022FA  6400 0130               1751                      BCC     PRINT_LIST_DONE
000022FE  6100 012E               1752                      BSR     LIST_HELPER
00002302  12FC 0041               1753                      MOVE.B  #'A', (A1)+
00002306  12FC 0037               1754                      MOVE.B  #'7', (A1)+
0000230A  4E75                    1755                      RTS 
0000230C                          1756                  
0000230C  E34B                    1757  PRE_DEC             LSL.W   #$1, D3             ; shift left to grab the MSB, Register is read from left to right
0000230E  6400 000E               1758                      BCC     POST_D1             ; if bit was zero move on to the next register
00002312  6100 011A               1759                      BSR     LIST_HELPER         ; adds back slashes if needed
00002316  12FC 0044               1760                      MOVE.B  #'D', (A1)+         ; add register to Buffer
0000231A  12FC 0030               1761                      MOVE.B  #'0', (A1)+
0000231E  E34B                    1762  POST_D1             LSL.W   #$1, D3             ; shift left again
00002320  6400 000E               1763                      BCC     POST_D2             ; repeat until all register are accounted for
00002324  6100 0108               1764                      BSR     LIST_HELPER
00002328  12FC 0044               1765                      MOVE.B  #'D', (A1)+
0000232C  12FC 0031               1766                      MOVE.B  #'1', (A1)+
00002330  E34B                    1767  POST_D2             LSL.W   #$1, D3
00002332  6400 000E               1768                      BCC     POST_D3
00002336  6100 00F6               1769                      BSR     LIST_HELPER
0000233A  12FC 0044               1770                      MOVE.B  #'D', (A1)+
0000233E  12FC 0032               1771                      MOVE.B  #'2', (A1)+
00002342  E34B                    1772  POST_D3             LSL.W   #$1, D3
00002344  6400 000E               1773                      BCC     POST_D4
00002348  6100 00E4               1774                      BSR     LIST_HELPER
0000234C  12FC 0044               1775                      MOVE.B  #'D', (A1)+
00002350  12FC 0033               1776                      MOVE.B  #'3', (A1)+
00002354  E34B                    1777  POST_D4             LSL.W   #$1, D3
00002356  6400 000E               1778                      BCC     POST_D5
0000235A  6100 00D2               1779                      BSR     LIST_HELPER
0000235E  12FC 0044               1780                      MOVE.B  #'D', (A1)+
00002362  12FC 0034               1781                      MOVE.B  #'4', (A1)+
00002366  E34B                    1782  POST_D5             LSL.W   #$1, D3
00002368  6400 000E               1783                      BCC     POST_D6
0000236C  6100 00C0               1784                      BSR     LIST_HELPER
00002370  12FC 0044               1785                      MOVE.B  #'D', (A1)+
00002374  12FC 0035               1786                      MOVE.B  #'5', (A1)+
00002378  E34B                    1787  POST_D6             LSL.W   #$1, D3
0000237A  6400 000E               1788                      BCC     POST_D7
0000237E  6100 00AE               1789                      BSR     LIST_HELPER
00002382  12FC 0044               1790                      MOVE.B  #'D', (A1)+
00002386  12FC 0036               1791                      MOVE.B  #'6', (A1)+
0000238A  E34B                    1792  POST_D7             LSL.W   #$1, D3
0000238C  6400 000E               1793                      BCC     POST_A0
00002390  6100 009C               1794                      BSR     LIST_HELPER
00002394  12FC 0044               1795                      MOVE.B  #'D', (A1)+
00002398  12FC 0037               1796                      MOVE.B  #'7', (A1)+
0000239C  E34B                    1797  POST_A0             LSL.W   #$1, D3
0000239E  6400 000E               1798                      BCC     POST_A1
000023A2  6100 008A               1799                      BSR     LIST_HELPER
000023A6  12FC 0041               1800                      MOVE.B  #'A', (A1)+
000023AA  12FC 0030               1801                      MOVE.B  #'0', (A1)+
000023AE  E34B                    1802  POST_A1             LSL.W   #$1, D3
000023B0  6400 000E               1803                      BCC     POST_A2
000023B4  6100 0078               1804                      BSR     LIST_HELPER
000023B8  12FC 0041               1805                      MOVE.B  #'A', (A1)+
000023BC  12FC 0031               1806                      MOVE.B  #'1', (A1)+
000023C0  E34B                    1807  POST_A2             LSL.W   #$1, D3
000023C2  6400 000E               1808                      BCC     POST_A3
000023C6  6100 0066               1809                      BSR     LIST_HELPER
000023CA  12FC 0041               1810                      MOVE.B  #'A', (A1)+
000023CE  12FC 0032               1811                      MOVE.B  #'2', (A1)+
000023D2  E34B                    1812  POST_A3             LSL.W   #$1, D3
000023D4  6400 000E               1813                      BCC     POST_A4
000023D8  6100 0054               1814                      BSR     LIST_HELPER
000023DC  12FC 0041               1815                      MOVE.B  #'A', (A1)+
000023E0  12FC 0033               1816                      MOVE.B  #'3', (A1)+
000023E4  E34B                    1817  POST_A4             LSL.W   #$1, D3
000023E6  6400 000E               1818                      BCC     POST_A5
000023EA  6100 0042               1819                      BSR     LIST_HELPER
000023EE  12FC 0041               1820                      MOVE.B  #'A', (A1)+
000023F2  12FC 0034               1821                      MOVE.B  #'4', (A1)+
000023F6  E34B                    1822  POST_A5             LSL.W   #$1, D3
000023F8  6400 000E               1823                      BCC     POST_A6
000023FC  6100 0030               1824                      BSR     LIST_HELPER
00002400  12FC 0041               1825                      MOVE.B  #'A', (A1)+
00002404  12FC 0035               1826                      MOVE.B  #'5', (A1)+
00002408  E34B                    1827  POST_A6             LSL.W   #$1, D3
0000240A  6400 000E               1828                      BCC     POST_A7
0000240E  6100 001E               1829                      BSR     LIST_HELPER
00002412  12FC 0041               1830                      MOVE.B  #'A', (A1)+
00002416  12FC 0036               1831                      MOVE.B  #'6', (A1)+
0000241A  E34B                    1832  POST_A7             LSL.W   #$1, D3
0000241C  6400 000E               1833                      BCC     PRINT_LIST_DONE
00002420  6100 000C               1834                      BSR     LIST_HELPER
00002424  12FC 0041               1835                      MOVE.B  #'A', (A1)+
00002428  12FC 0037               1836                      MOVE.B  #'7', (A1)+ 
0000242C                          1837  
0000242C  4E75                    1838  PRINT_LIST_DONE     RTS
0000242E                          1839  
0000242E                          1840  ************************************************************
0000242E                          1841  *LIST_HELPER: Helps Print_LIST store registers in the buffer
0000242E                          1842  *               when using MOVEM
0000242E                          1843  *PRE-CONDITIONS: D0 is cleared when using MOVEM
0000242E                          1844  *POST-CONDITIONS: If D0 is 0, set D0 to 1 (acts as a flag)
0000242E                          1845  *               else add a back slash to the buffer
0000242E                          1846  ************************************************************
0000242E                          1847  
0000242E  B03C 0001               1848  LIST_HELPER         CMP.B   #1, D0
00002432  6700 0008               1849                      BEQ     PRINT_SLASH
00002436  103C 0001               1850                      MOVE.B  #1, D0
0000243A  4E75                    1851                      RTS
0000243C                          1852                      
0000243C  12FC 002F               1853  PRINT_SLASH         MOVE.B  #'/', (A1)+
00002440  4E75                    1854                      RTS
00002442                          1855                                          
00002442                          1856  ***********************PRINT_BYTE***************************
00002442                          1857  
00002442  12FC 002E               1858  PRINT_BYTE          MOVE.B  #'.', (A1)+
00002446  12FC 0042               1859                      MOVE.B  #'B', (A1)+
0000244A  12FC 0009               1860                      MOVE.B  #TAB, (A1)+
0000244E  12FC 0009               1861                      MOVE.B  #TAB, (A1)+
00002452  6000 FC6A               1862                      BRA     SIZE_FOUND
00002456                          1863  
00002456                          1864  ***********************PRINT_WORD***************************
00002456                          1865  
00002456  12FC 002E               1866  PRINT_WORD          MOVE.B  #'.', (A1)+
0000245A  12FC 0057               1867                      MOVE.B  #'W', (A1)+
0000245E  12FC 0009               1868                      MOVE.B  #TAB, (A1)+
00002462  12FC 0009               1869                      MOVE.B  #TAB, (A1)+
00002466  6000 FC56               1870                      BRA     SIZE_FOUND
0000246A                          1871  
0000246A                          1872  ***********************PRINT_LONG***************************
0000246A                          1873  
0000246A  12FC 002E               1874  PRINT_LONG          MOVE.B  #'.', (A1)+
0000246E  12FC 004C               1875                      MOVE.B  #'L', (A1)+
00002472  12FC 0009               1876                      MOVE.B  #TAB, (A1)+
00002476  12FC 0009               1877                      MOVE.B  #TAB, (A1)+
0000247A  6000 FC42               1878                      BRA     SIZE_FOUND
0000247E                          1879  
0000247E                          1880  ***********************INVALID_OPCODE***********************
0000247E                          1881  
0000247E  12FC 0009               1882  INVALID_OPCODE      MOVE.B  #TAB, (A1)+         ; adds tab to buffer
00002482  6100 0328               1883                      BSR     OPCODE_END          ; add null terminator at the end
00002486  43F9 000027F2           1884                      LEA     BUFFER, A1          ; print whats in the buffer
0000248C  103C 000E               1885                      MOVE.B  #14, D0
00002490  4E4F                    1886                      TRAP #15
00002492  43F9 00002948           1887                      LEA     OPCODE_ERROR, A1    ; output error message
00002498  6100 0330               1888                      BSR     PRINT_MESSAGE
0000249C  4E75                    1889                      RTS
0000249E                          1890  
0000249E                          1891  ************************************************************
0000249E                          1892  *PRINT_ORI: Adds ORI to the buffer
0000249E                          1893  *PRE-CONDITIONS: N/A
0000249E                          1894  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000249E                          1895  ************************************************************
0000249E                          1896  
0000249E  12FC 004F               1897  PRINT_ORI           MOVE.B  #'O', (A1)+
000024A2  12FC 0052               1898                      MOVE.B  #'R', (A1)+
000024A6  12FC 0049               1899                      MOVE.B  #'I', (A1)+
000024AA  4E75                    1900                      RTS
000024AC                          1901  
000024AC                          1902  ************************************************************
000024AC                          1903  *PRINT_BCLR: Adds BCLR to the buffer
000024AC                          1904  *PRE-CONDITIONS: N/A
000024AC                          1905  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000024AC                          1906  ************************************************************
000024AC                          1907  
000024AC  12FC 0042               1908  PRINT_BCLR          MOVE.B  #'B', (A1)+
000024B0  12FC 0043               1909                      MOVE.B  #'C', (A1)+
000024B4  12FC 004C               1910                      MOVE.B  #'L', (A1)+
000024B8  12FC 0052               1911                      MOVE.B  #'R', (A1)+
000024BC  4E75                    1912                      RTS
000024BE                          1913  
000024BE                          1914  ************************************************************
000024BE                          1915  *PRINT_CMPI: Adds CMPI to the buffer
000024BE                          1916  *PRE-CONDITIONS: N/A
000024BE                          1917  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000024BE                          1918  ************************************************************
000024BE                          1919  
000024BE  12FC 0043               1920  PRINT_CMPI          MOVE.B  #'C', (A1)+
000024C2  12FC 004D               1921                      MOVE.B  #'M', (A1)+
000024C6  12FC 0050               1922                      MOVE.B  #'P', (A1)+
000024CA  12FC 0049               1923                      MOVE.B  #'I', (A1)+
000024CE  4E75                    1924                      RTS
000024D0                          1925  
000024D0                          1926  ************************************************************
000024D0                          1927  *PRINT_MOVEM: Adds MOVEM to the buffer
000024D0                          1928  *PRE-CONDITIONS: N/A
000024D0                          1929  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000024D0                          1930  ************************************************************
000024D0                          1931  
000024D0  12FC 004D               1932  PRINT_MOVEM         MOVE.B  #'M', (A1)+
000024D4  12FC 004F               1933                      MOVE.B  #'O', (A1)+
000024D8  12FC 0056               1934                      MOVE.B  #'V', (A1)+
000024DC  12FC 0045               1935                      MOVE.B  #'E', (A1)+
000024E0  12FC 004D               1936                      MOVE.B  #'M', (A1)+
000024E4  4E75                    1937                      RTS
000024E6                          1938  
000024E6                          1939  ************************************************************
000024E6                          1940  *PRINT_LEA: Adds LEA to the buffer
000024E6                          1941  *PRE-CONDITIONS: N/A
000024E6                          1942  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000024E6                          1943  ************************************************************
000024E6                          1944  
000024E6  12FC 004C               1945  PRINT_LEA           MOVE.B  #'L', (A1)+
000024EA  12FC 0045               1946                      MOVE.B  #'E', (A1)+
000024EE  12FC 0041               1947                      MOVE.B  #'A', (A1)+
000024F2  12FC 0009               1948                      MOVE.B  #TAB, (A1)+
000024F6  12FC 0009               1949                      MOVE.B  #TAB, (A1)+
000024FA  4E75                    1950                      RTS
000024FC                          1951  
000024FC                          1952  ************************************************************
000024FC                          1953  *PRINT_NEG: Adds NEG to the buffer
000024FC                          1954  *PRE-CONDITIONS: N/A
000024FC                          1955  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000024FC                          1956  ************************************************************
000024FC                          1957  
000024FC  12FC 004E               1958  PRINT_NEG           MOVE.B  #'N', (A1)+
00002500  12FC 0045               1959                      MOVE.B  #'E', (A1)+
00002504  12FC 0047               1960                      MOVE.B  #'G', (A1)+
00002508  4E75                    1961                      RTS
0000250A                          1962  
0000250A                          1963  ************************************************************
0000250A                          1964  *PRINT_JSR: Adds JSR to the buffer
0000250A                          1965  *PRE-CONDITIONS: N/A
0000250A                          1966  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000250A                          1967  ************************************************************
0000250A                          1968  
0000250A  12FC 004A               1969  PRINT_JSR           MOVE.B  #'J', (A1)+
0000250E  12FC 0053               1970                      MOVE.B  #'S', (A1)+
00002512  12FC 0052               1971                      MOVE.B  #'R', (A1)+
00002516  12FC 0009               1972                      MOVE.B  #TAB, (A1)+
0000251A  12FC 0009               1973                      MOVE.B  #TAB, (A1)+
0000251E  4E75                    1974                      RTS
00002520                          1975  
00002520                          1976  ************************************************************
00002520                          1977  *PRINT_RTS: Adds RTS to the buffer
00002520                          1978  *PRE-CONDITIONS: N/A
00002520                          1979  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002520                          1980  ************************************************************
00002520                          1981  
00002520  12FC 0052               1982  PRINT_RTS           MOVE.B  #'R', (A1)+
00002524  12FC 0054               1983                      MOVE.B  #'T', (A1)+
00002528  12FC 0053               1984                      MOVE.B  #'S', (A1)+
0000252C  12FC 0000               1985                      MOVE.B  #$0, (A1)+
00002530  4E75                    1986                      RTS
00002532                          1987  
00002532                          1988  ************************************************************
00002532                          1989  *PRINT_SUBQ: Adds SUBQ to the buffer
00002532                          1990  *PRE-CONDITIONS: N/A
00002532                          1991  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002532                          1992  ************************************************************
00002532                          1993  
00002532  12FC 0053               1994  PRINT_SUBQ          MOVE.B  #'S', (A1)+
00002536  12FC 0055               1995                      MOVE.B  #'U', (A1)+
0000253A  12FC 0042               1996                      MOVE.B  #'B', (A1)+
0000253E  12FC 0051               1997                      MOVE.B  #'Q', (A1)+
00002542  4E75                    1998                      RTS
00002544                          1999  
00002544                          2000  ************************************************************
00002544                          2001  *PRINT_BCS: Adds BCS to the buffer
00002544                          2002  *PRE-CONDITIONS: N/A
00002544                          2003  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002544                          2004  ************************************************************
00002544                          2005  
00002544  12FC 0042               2006  PRINT_BCS           MOVE.B  #'B', (A1)+
00002548  12FC 0043               2007                      MOVE.B  #'C', (A1)+
0000254C  12FC 0053               2008                      MOVE.B  #'S', (A1)+
00002550  12FC 0009               2009                      MOVE.B  #TAB, (A1)+
00002554  12FC 0009               2010                      MOVE.B  #TAB, (A1)+
00002558  4E75                    2011                      RTS
0000255A                          2012  
0000255A                          2013  ************************************************************
0000255A                          2014  *PRINT_BGE: Adds BGE to the buffer
0000255A                          2015  *PRE-CONDITIONS: N/A
0000255A                          2016  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000255A                          2017  ************************************************************
0000255A                          2018  
0000255A  12FC 0042               2019  PRINT_BGE           MOVE.B  #'B', (A1)+
0000255E  12FC 0047               2020                      MOVE.B  #'G', (A1)+
00002562  12FC 0045               2021                      MOVE.B  #'E', (A1)+
00002566  12FC 0009               2022                      MOVE.B  #TAB, (A1)+
0000256A  12FC 0009               2023                      MOVE.B  #TAB, (A1)+
0000256E  4E75                    2024                      RTS
00002570                          2025  
00002570                          2026  ************************************************************
00002570                          2027  *PRINT_BLT: Adds BLT to the buffer
00002570                          2028  *PRE-CONDITIONS: N/A
00002570                          2029  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002570                          2030  ************************************************************
00002570                          2031  
00002570  12FC 0042               2032  PRINT_BLT           MOVE.B  #'B', (A1)+
00002574  12FC 004C               2033                      MOVE.B  #'L', (A1)+
00002578  12FC 0054               2034                      MOVE.B  #'T', (A1)+
0000257C  12FC 0009               2035                      MOVE.B  #TAB, (A1)+
00002580  12FC 0009               2036                      MOVE.B  #TAB, (A1)+
00002584  4E75                    2037                      RTS
00002586                          2038  
00002586                          2039  ************************************************************
00002586                          2040  *PRINT_BVC: Adds BVC to the buffer
00002586                          2041  *PRE-CONDITIONS: N/A
00002586                          2042  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002586                          2043  ************************************************************
00002586                          2044  
00002586  12FC 0042               2045  PRINT_BVC           MOVE.B  #'B', (A1)+
0000258A  12FC 0056               2046                      MOVE.B  #'V', (A1)+
0000258E  12FC 0043               2047                      MOVE.B  #'C', (A1)+
00002592  12FC 0009               2048                      MOVE.B  #TAB, (A1)+
00002596  12FC 0009               2049                      MOVE.B  #TAB, (A1)+
0000259A  4E75                    2050                      RTS
0000259C                          2051  
0000259C                          2052  ************************************************************
0000259C                          2053  *PRINT_BRA: Adds BRA to the buffer
0000259C                          2054  *PRE-CONDITIONS: N/A
0000259C                          2055  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000259C                          2056  ************************************************************
0000259C                          2057  
0000259C  12FC 0042               2058  PRINT_BRA           MOVE.B  #'B', (A1)+
000025A0  12FC 0052               2059                      MOVE.B  #'R', (A1)+
000025A4  12FC 0041               2060                      MOVE.B  #'A', (A1)+
000025A8  12FC 0009               2061                      MOVE.B  #TAB, (A1)+
000025AC  12FC 0009               2062                      MOVE.B  #TAB, (A1)+
000025B0  4E75                    2063                      RTS
000025B2                          2064  
000025B2                          2065  ************************************************************
000025B2                          2066  *PRINT_DIVS: Adds DIVS to the buffer
000025B2                          2067  *PRE-CONDITIONS: N/A
000025B2                          2068  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000025B2                          2069  ************************************************************
000025B2                          2070  
000025B2  12FC 0044               2071  PRINT_DIVS          MOVE.B  #'D', (A1)+
000025B6  12FC 0049               2072                      MOVE.B  #'I', (A1)+
000025BA  12FC 0056               2073                      MOVE.B  #'V', (A1)+
000025BE  12FC 0053               2074                      MOVE.B  #'S', (A1)+
000025C2  12FC 0009               2075                      MOVE.B  #TAB, (A1)+
000025C6  12FC 0009               2076                      MOVE.B  #TAB, (A1)+
000025CA  4E75                    2077                      RTS
000025CC                          2078  
000025CC                          2079  ************************************************************
000025CC                          2080  *PRINT_OR: Adds OR to the buffer
000025CC                          2081  *PRE-CONDITIONS: N/A
000025CC                          2082  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000025CC                          2083  ************************************************************
000025CC                          2084  
000025CC  12FC 004F               2085  PRINT_OR            MOVE.B  #'O', (A1)+
000025D0  12FC 0052               2086                      MOVE.B  #'R', (A1)+
000025D4  4E75                    2087                      RTS
000025D6                          2088  
000025D6                          2089  ************************************************************
000025D6                          2090  *PRINT_SUB: Adds SUB to the buffer
000025D6                          2091  *PRE-CONDITIONS: N/A
000025D6                          2092  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000025D6                          2093  ************************************************************
000025D6                          2094  
000025D6  12FC 0053               2095  PRINT_SUB           MOVE.B  #'S', (A1)+
000025DA  12FC 0055               2096                      MOVE.B  #'U', (A1)+
000025DE  12FC 0042               2097                      MOVE.B  #'B', (A1)+
000025E2  4E75                    2098                      RTS
000025E4                          2099  
000025E4                          2100  ************************************************************
000025E4                          2101  *PRINT_MOVE: Adds MOVE to the buffer
000025E4                          2102  *PRE-CONDITIONS: N/A
000025E4                          2103  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000025E4                          2104  ************************************************************
000025E4                          2105  
000025E4  12FC 004D               2106  PRINT_MOVE          MOVE.B  #'M', (A1)+
000025E8  12FC 004F               2107                      MOVE.B  #'O', (A1)+
000025EC  12FC 0056               2108                      MOVE.B  #'V', (A1)+
000025F0  12FC 0045               2109                      MOVE.B  #'E', (A1)+
000025F4  4E75                    2110                      RTS
000025F6                          2111  
000025F6                          2112  ************************************************************
000025F6                          2113  *PRINT_MOVEA: Adds MOVEA to the buffer
000025F6                          2114  *PRE-CONDITIONS: N/A
000025F6                          2115  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000025F6                          2116  ************************************************************
000025F6                          2117  
000025F6  12FC 004D               2118  PRINT_MOVEA         MOVE.B  #'M', (A1)+
000025FA  12FC 004F               2119                      MOVE.B  #'O', (A1)+
000025FE  12FC 0056               2120                      MOVE.B  #'V', (A1)+
00002602  12FC 0045               2121                      MOVE.B  #'E', (A1)+
00002606  12FC 0041               2122                      MOVE.B  #'A', (A1)+
0000260A  4E75                    2123                      RTS
0000260C                          2124  
0000260C                          2125  ************************************************************
0000260C                          2126  *PRINT_EOR: Adds EOR to the buffer
0000260C                          2127  *PRE-CONDITIONS: N/A
0000260C                          2128  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000260C                          2129  ************************************************************
0000260C                          2130  
0000260C  12FC 0045               2131  PRINT_EOR           MOVE.B  #'E', (A1)+
00002610  12FC 004F               2132                      MOVE.B  #'O', (A1)+
00002614  12FC 0052               2133                      MOVE.B  #'R', (A1)+                    
00002618  4E75                    2134                      RTS
0000261A                          2135  
0000261A                          2136  ************************************************************
0000261A                          2137  *PRINT_CMP: Adds CMP to the buffer
0000261A                          2138  *PRE-CONDITIONS: N/A
0000261A                          2139  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000261A                          2140  ************************************************************
0000261A                          2141  
0000261A  12FC 0043               2142  PRINT_CMP           MOVE.B  #'C', (A1)+
0000261E  12FC 004D               2143                      MOVE.B  #'M', (A1)+
00002622  12FC 0050               2144                      MOVE.B  #'P', (A1)+
00002626  12FC 0009               2145                      MOVE.B  #TAB, (A1)+
0000262A  12FC 0009               2146                      MOVE.B  #TAB, (A1)+
0000262E  4E75                    2147                      RTS
00002630                          2148  
00002630                          2149  ************************************************************
00002630                          2150  *PRINT_MULS: Adds MULS to the buffer
00002630                          2151  *PRE-CONDITIONS: N/A
00002630                          2152  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002630                          2153  ************************************************************
00002630                          2154  
00002630  12FC 004D               2155  PRINT_MULS          MOVE.B  #'M', (A1)+
00002634  12FC 0055               2156                      MOVE.B  #'U', (A1)+
00002638  12FC 004C               2157                      MOVE.B  #'L', (A1)+
0000263C  12FC 0053               2158                      MOVE.B  #'S', (A1)+
00002640  12FC 0009               2159                      MOVE.B  #TAB, (A1)+
00002644  12FC 0009               2160                      MOVE.B  #TAB, (A1)+
00002648  4E75                    2161                      RTS
0000264A                          2162  
0000264A                          2163  ************************************************************
0000264A                          2164  *PRINT_ADD: Adds ADD to the buffer
0000264A                          2165  *PRE-CONDITIONS: N/A
0000264A                          2166  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000264A                          2167  ************************************************************
0000264A                          2168  
0000264A  12FC 0041               2169  PRINT_ADD           MOVE.B  #'A', (A1)+
0000264E  12FC 0044               2170                      MOVE.B  #'D', (A1)+
00002652  12FC 0044               2171                      MOVE.B  #'D', (A1)+
00002656  12FC 0009               2172                      MOVE.B  #TAB, (A1)+
0000265A  12FC 0009               2173                      MOVE.B  #TAB, (A1)+
0000265E  4E75                    2174                      RTS
00002660                          2175  
00002660                          2176  ************************************************************
00002660                          2177  *PRINT_ADDA: Adds ADDA to the buffer
00002660                          2178  *PRE-CONDITIONS: N/A
00002660                          2179  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002660                          2180  ************************************************************
00002660                          2181  
00002660  12FC 0041               2182  PRINT_ADDA          MOVE.B  #'A', (A1)+
00002664  12FC 0044               2183                      MOVE.B  #'D', (A1)+
00002668  12FC 0044               2184                      MOVE.B  #'D', (A1)+
0000266C  12FC 0041               2185                      MOVE.B  #'A', (A1)+
00002670  4E75                    2186                      RTS
00002672                          2187  
00002672                          2188  ************************************************************
00002672                          2189  *PRINT_LSR: Adds LSR to the buffer
00002672                          2190  *PRE-CONDITIONS: N/A
00002672                          2191  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002672                          2192  ************************************************************
00002672                          2193  
00002672  12FC 004C               2194  PRINT_LSR           MOVE.B  #'L', (A1)+
00002676  12FC 0053               2195                      MOVE.B  #'S', (A1)+
0000267A  12FC 0052               2196                      MOVE.B  #'R', (A1)+
0000267E  4E75                    2197                      RTS
00002680                          2198  
00002680                          2199  ************************************************************
00002680                          2200  *PRINT_LSL: Adds LSL to the buffer
00002680                          2201  *PRE-CONDITIONS: N/A
00002680                          2202  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
00002680                          2203  ************************************************************
00002680                          2204  
00002680  12FC 004C               2205  PRINT_LSL           MOVE.B  #'L', (A1)+
00002684  12FC 0053               2206                      MOVE.B  #'S', (A1)+
00002688  12FC 004C               2207                      MOVE.B  #'L', (A1)+
0000268C  4E75                    2208                      RTS
0000268E                          2209  
0000268E                          2210  ************************************************************
0000268E                          2211  *PRINT_ASR: Adds ASR to the buffer
0000268E                          2212  *PRE-CONDITIONS: N/A
0000268E                          2213  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000268E                          2214  ************************************************************
0000268E                          2215  
0000268E  12FC 0041               2216  PRINT_ASR           MOVE.B  #'A', (A1)+
00002692  12FC 0053               2217                      MOVE.B  #'S', (A1)+
00002696  12FC 0052               2218                      MOVE.B  #'R', (A1)+
0000269A  4E75                    2219                      RTS
0000269C                          2220  
0000269C                          2221  ************************************************************
0000269C                          2222  *PRINT_ASL: Adds ASL to the buffer
0000269C                          2223  *PRE-CONDITIONS: N/A
0000269C                          2224  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
0000269C                          2225  ************************************************************
0000269C                          2226  
0000269C  12FC 0041               2227  PRINT_ASL           MOVE.B  #'A', (A1)+
000026A0  12FC 0053               2228                      MOVE.B  #'S', (A1)+
000026A4  12FC 004C               2229                      MOVE.B  #'L', (A1)+
000026A8  4E75                    2230                      RTS
000026AA                          2231  
000026AA                          2232  ************************************************************
000026AA                          2233  *PRINT_ROR: Adds ROR to the buffer
000026AA                          2234  *PRE-CONDITIONS: N/A
000026AA                          2235  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000026AA                          2236  ************************************************************
000026AA                          2237  
000026AA  12FC 0052               2238  PRINT_ROR           MOVE.B  #'R', (A1)+
000026AE  12FC 004F               2239                      MOVE.B  #'O', (A1)+
000026B2  12FC 0052               2240                      MOVE.B  #'R', (A1)+
000026B6  4E75                    2241                      RTS
000026B8                          2242  
000026B8                          2243  ************************************************************
000026B8                          2244  *PRINT_ROL: Adds ROL to the buffer
000026B8                          2245  *PRE-CONDITIONS: N/A
000026B8                          2246  *POST-CONDITIONS: Adds OPCODE to the buffer to be printed
000026B8                          2247  ************************************************************
000026B8                          2248  
000026B8  12FC 0052               2249  PRINT_ROL           MOVE.B  #'R', (A1)+
000026BC  12FC 004F               2250                      MOVE.B  #'O', (A1)+
000026C0  12FC 004C               2251                      MOVE.B  #'L', (A1)+
000026C4  4E75                    2252                      RTS
000026C6                          2253                      
000026C6                          2254  ************************************************************
000026C6                          2255  *PRINT_ADDRESS: adds the current address to the print buffer
000026C6                          2256  *PRE-CONDITIONS: A0 contains the current address
000026C6                          2257  *POST-CONDITIONS: Grabs address, converts it to hex, and adds
000026C6                          2258  *               it to the buffer
000026C6                          2259  ************************************************************
000026C6                          2260  
000026C6  23C8 000027EE           2261  PRINT_ADDRESS       MOVE.L  A0, CURRENT_ADD     ; current address is at A0
000026CC  4DF9 000027EE           2262                      LEA     CURRENT_ADD, A6     ; loads it's contents into D6
000026D2  163C 0003               2263                      MOVE.B  #3, D3              ; to print a Long addres
000026D6  43F9 000027F2           2264                      LEA     BUFFER, A1          ; load buffer into A1 to hold address and it's OPCODE
000026DC  6100 EA3E               2265                      BSR     GRAB_DATA           ; converts address to hex
000026E0  12FC 0009               2266                      MOVE.B  #TAB, (A1)+         ; create a gap between address and OPCODE
000026E4  4E75                    2267                      RTS
000026E6                          2268                      
000026E6                          2269  ************************************************************
000026E6                          2270  *GRAB_FIRST_HEX: Grabs first hex of OPCODE and stores it into D2
000026E6                          2271  *PRE-CONDITIONS: OPCODE is stored in D1
000026E6                          2272  *POST-CONDITIONS: Masks first hex of an OPCODE and stores it in 
000026E6                          2273  *               the LSB position
000026E6                          2274  ************************************************************ 
000026E6                          2275                 
000026E6  3401                    2276  GRAB_FIRST_HEX      MOVE.W  D1, D2              ; Make copy of OPCODE
000026E8  C47C F000               2277                      AND.W   #$F000, D2          ; Mask to get the 2nd Hex Value
000026EC  103C 000C               2278                      MOVE.B  #12, D0             ; Shift to the LSB
000026F0  E06A                    2279                      LSR.W   D0, D2                    
000026F2  4E75                    2280                      RTS
000026F4                          2281  
000026F4                          2282  ************************************************************
000026F4                          2283  *GRAB_SECOND_HEX: Grabs Second hex of OPCODE and stores it into D2
000026F4                          2284  *PRE-CONDITIONS: OPCODE is stored in D1
000026F4                          2285  *POST-CONDITIONS: Masks second hex of an OPCODE and stores it in 
000026F4                          2286  *               the LSB position
000026F4                          2287  ************************************************************ 
000026F4                          2288                 
000026F4  3401                    2289  GRAB_SECOND_HEX     MOVE.W  D1, D2              ; Make copy of OPCODE
000026F6  C47C 0F00               2290                      AND.W   #$0F00, D2          ; Mask to get the 2nd Hex Value
000026FA  E04A                    2291                      LSR.W   #8, D2              ; Shift to the LSB
000026FC  4E75                    2292                      RTS
000026FE                          2293  
000026FE                          2294  ************************************************************
000026FE                          2295  *GRAB_THIRD_HEX: Grabs third hex of OPCODE and stores it into D2
000026FE                          2296  *PRE-CONDITIONS: OPCODE is stored in D1
000026FE                          2297  *POST-CONDITIONS: Masks third hex of an OPCODE and stores it in 
000026FE                          2298  *               the LSB position
000026FE                          2299  ************************************************************
000026FE                          2300                  
000026FE  3401                    2301  GRAB_THIRD_HEX      MOVE.W  D1, D2
00002700  C47C 00F0               2302                      AND.W   #$00F0, D2
00002704  E84A                    2303                      LSR.W   #4, D2
00002706  4E75                    2304                      RTS
00002708                          2305  
00002708                          2306  ************************************************************
00002708                          2307  *GRAB_FOURTH_HEX: Grabs fourth hex of OPCODE and stores it into D2
00002708                          2308  *PRE-CONDITIONS: OPCODE is stored in D1
00002708                          2309  *POST-CONDITIONS: Masks fourth hex of an OPCODE 
00002708                          2310  ************************************************************
00002708                          2311                  
00002708  3401                    2312  GRAB_FOURTH_HEX     MOVE.W  D1, D2
0000270A  C47C 000F               2313                      AND.W   #$000F, D2
0000270E  4E75                    2314                      RTS
00002710                          2315  
00002710                          2316  ************************************************************
00002710                          2317  *GRAB_FIRST_BYTE: Grabs the MSByte and stored it into D2
00002710                          2318  *PRE-CONDITIONS: OPCODE is stored in D1
00002710                          2319  *POST-CONDITIONS: Masks the MSByte of an OPCODE and stores it in
00002710                          2320  *               the LSByte
00002710                          2321  ************************************************************
00002710                          2322                  
00002710  3401                    2323  GRAB_FIRST_BYTE     MOVE.W  D1, D2
00002712  C47C FF00               2324                      AND.W   #$FF00, D2          ; Grab first 2 hex values
00002716  E04A                    2325                      LSR.W   #8, D2
00002718  4E75                    2326                      RTS
0000271A                          2327  
0000271A                          2328  ************************************************************
0000271A                          2329  *GRAB_MID_BYTE: Grabs the  middle Byte ( nibble 2 and 3) and 
0000271A                          2330  *               stored it into D2
0000271A                          2331  *PRE-CONDITIONS: OPCODE is stored in D1
0000271A                          2332  *POST-CONDITIONS: Masks the middle Byte of an OPCODE and stores 
0000271A                          2333  *               it in the LSByte
0000271A                          2334  ************************************************************
0000271A                          2335                  
0000271A  3401                    2336  GRAB_MID_BYTE       MOVE.W  D1, D2
0000271C  C47C 0FF0               2337                      AND.W   #$0FF0, D2          ; Grab middle 2 hex values
00002720  E84A                    2338                      LSR.W   #4, D2
00002722  4E75                    2339                      RTS
00002724                          2340  
00002724                          2341  ************************************************************
00002724                          2342  *GRAB_LAST_BYTE: Grabs the LSByte and stored it into D2
00002724                          2343  *PRE-CONDITIONS: OPCODE is stored in D1
00002724                          2344  *POST-CONDITIONS: Masks the LSByte of an OPCODE 
00002724                          2345  ************************************************************
00002724                          2346                  
00002724  3401                    2347  GRAB_LAST_BYTE      MOVE.W  D1, D2
00002726  C47C 00FF               2348                      AND.W   #$00FF, D2          ; Grab last 2 hex value
0000272A  4E75                    2349                      RTS
0000272C                          2350  
0000272C                          2351  ************************************************************
0000272C                          2352  *GRAB_OP & GRAB_DST: Stores the first octal in D4 and second
0000272C                          2353  *               octal in D5. This holds the mode and register
0000272C                          2354  *               of the DST
0000272C                          2355  *PRE-CONDITIONS: GRAB_MID_BYTE must be used before calling
0000272C                          2356  *POST-CONDITIONS: D4 contains the register and D5 contains
0000272C                          2357  *               the mode of the DST
0000272C                          2358  ************************************************************
0000272C                          2359  
0000272C  4E71                    2360  GRAB_OP             NOP       
0000272E  C47C 00FC               2361  GRAB_DST            AND.W   #$FC, D2            ; Mask to grab DST
00002732  E20A                    2362                      LSR.B   #1, D2              ; shift right 1 bit
00002734  1802                    2363                      MOVE.B  D2, D4
00002736  C83C 0070               2364                      AND.B   #$70, D4            ; Mask DST Reg
0000273A  E80C                    2365                      LSR.B   #4, D4              ; Shift to LSB
0000273C                          2366                  
0000273C  E20A                    2367                      LSR.B   #1, D2              ; shift right 1 bit
0000273E  1A02                    2368                      MOVE.B  D2, D5
00002740  CA3C 0007               2369                      AND.B   #$7, D5             ; Mask DST Mode
00002744  4E75                    2370                      RTS
00002746                          2371  
00002746                          2372  ************************************************************
00002746                          2373  *GRAB_SRC & GRAB_EA: Stores the third octal in D6 and second
00002746                          2374  *               octal in D7. This holds the mode and register
00002746                          2375  *               of the SRC
00002746                          2376  *PRE-CONDITIONS: GRAB_LAST_BYTE must be used before calling
00002746                          2377  *POST-CONDITIONS: D6 contains the mode and D7 contains the
00002746                          2378  *               register of the SRC
00002746                          2379  ************************************************************
00002746                          2380  
00002746  4E71                    2381  GRAB_SRC            NOP         
00002748  C43C 003F               2382  GRAB_EA             AND.B   #$3F, D2
0000274C  1E02                    2383                      MOVE.B  D2, D7
0000274E  CE3C 0007               2384                      AND.B   #$7, D7             ; Mask EA/SRC REG
00002752                          2385                  
00002752  E30A                    2386                      LSL.B   #1, D2
00002754  1C02                    2387                      MOVE.B  D2, D6
00002756  CC3C 0070               2388                      AND.B   #$70, D6            ; Mask EA/SRC MODE
0000275A  E80E                    2389                      LSR.B   #4, D6              ; Shift to LSB
0000275C  4E75                    2390                      RTS
0000275E                          2391  
0000275E                          2392  ************************************************************
0000275E                          2393  *GRAB_REG:
0000275E                          2394  *PRE-CONDITIONS:
0000275E                          2395  *POST-CONDITIONS:
0000275E                          2396  ************************************************************
0000275E                          2397  
0000275E  1E01                    2398  GRAB_REG            MOVE.B  D1, D7
00002760  CE3C 0007               2399                      AND.B   #$07, D7
00002764                          2400                      
00002764  1C02                    2401                      MOVE.B  D2, D6
00002766  CC3C 00E0               2402                      AND.B   #$E0, D6
0000276A  E90E                    2403                      LSL.B   #4, D6
0000276C  4E75                    2404                      RTS
0000276E                          2405  
0000276E                          2406  ************************************************************
0000276E                          2407  *PLAY_AGAIN: Asks the user if they would like to run the 
0000276E                          2408  *               disassembler again.
0000276E                          2409  *PRE-CONDITIONS: N/A
0000276E                          2410  *POST-CONDITIONS: If user replies with Y or y, then the Disassembler
0000276E                          2411  *               will start over, else the dissassembler ends
0000276E                          2412  ************************************************************
0000276E                          2413  
0000276E  6100 E8AE               2414  PLAY_AGAIN          BSR     INIT_DATA
00002772  43F9 00002953           2415                      LEA     AGAIN, A1
00002778  6100 0050               2416                      BSR     PRINT_MESSAGE    
0000277C  103C 0005               2417                      MOVE.B  #5, D0
00002780  4E4F                    2418                      TRAP    #15
00002782  43F9 00002842           2419                      LEA     NEW_LINE, A1
00002788  6100 0040               2420                      BSR     PRINT_MESSAGE
0000278C  B2BC 00000059           2421                      CMP.L   #$59, D1                ; If Y disassemble again, if not Y end
00002792  6700 000C               2422                      BEQ     RESTART
00002796  B2BC 00000079           2423                      CMP.L   #$79, D1                ; If y disassemble again
0000279C  6600 0042               2424                      BNE     DONE
000027A0  4E75                    2425  RESTART             RTS
000027A2                          2426  
000027A2                          2427  ************************************************************
000027A2                          2428  *OPCODE_BREAK: Adds a comma and space to the buffer. Used to
000027A2                          2429  *               break the SRC and DST apart.
000027A2                          2430  *PRE-CONDITIONS: SRC must be loaded into the buffer
000027A2                          2431  *POST-CONDITIONS: Adds a ', ' to the buffer
000027A2                          2432  ************************************************************
000027A2                          2433  
000027A2  12FC 002C               2434  OPCODE_BREAK        MOVE.B  #',', (A1)+
000027A6  12FC 0020               2435                      MOVE.B  #' ', (A1)+
000027AA  4E75                    2436                      RTS
000027AC                          2437  
000027AC                          2438  ************************************************************
000027AC                          2439  *OPCODE_END: Adds a null terminator to the end of the buffer.
000027AC                          2440  *               used to stop the buffer from printing beyond
000027AC                          2441  *               the desired output.
000027AC                          2442  *PRE-CONDITIONS: OPCODE must be finished and loaded into the
000027AC                          2443  *               buffer
000027AC                          2444  *POST-CONDITIONS: Buffer string has a null terminator added
000027AC                          2445  *               to the end.
000027AC                          2446  ************************************************************
000027AC                          2447  
000027AC  12FC 0000               2448  OPCODE_END          MOVE.B  #0, (A1)+
000027B0  4E75                    2449                      RTS
000027B2                          2450  
000027B2                          2451  ************************************************************
000027B2                          2452  *HEX: Adds a pound and dollar symbol to the buffer before a
000027B2                          2453  *               hex value is added to the buffer
000027B2                          2454  *PRE-CONDITIONS: Appropriate data up to the hex value must
000027B2                          2455  *               be added to the buffer
000027B2                          2456  *POST-CONDITIONS: Adds '#$' to the buffer before a hex value
000027B2                          2457  ************************************************************
000027B2                          2458                 
000027B2  12FC 0023               2459  HEX                 MOVE.B  #'#', (A1)+
000027B6  12FC 0024               2460                      MOVE.B  #'$', (A1)+
000027BA  4E75                    2461                      RTS                 
000027BC                          2462                      
000027BC                          2463  ************************************************************
000027BC                          2464  *PRINT_BUFFER: Prints the contents of buffer
000027BC                          2465  *PRE-CONDITIONS: N/A
000027BC                          2466  *POST-CONDITIONS: outputs the contents of buffer to the console
000027BC                          2467  ************************************************************
000027BC                          2468  
000027BC  43F9 000027F2           2469  PRINT_BUFFER        LEA      BUFFER, A1
000027C2  103C 000D               2470                      MOVE.B  #13, D0
000027C6  4E4F                    2471                      TRAP    #15
000027C8  4E75                    2472                      RTS
000027CA                          2473                                      
000027CA                          2474  ************************************************************
000027CA                          2475  *PRINT_MESSAGE: prints a pre-loaded message that is stored in
000027CA                          2476  *               A1
000027CA                          2477  *PRE-CONDITIONS: A1 must contain the pre-loaded message
000027CA                          2478  *POST-CONDITIONS: pre-loaded message is displayed to the console
000027CA                          2479  ************************************************************
000027CA                          2480  
000027CA  103C 000E               2481  PRINT_MESSAGE       MOVE.B  #14, D0
000027CE  4E4F                    2482                      TRAP    #15
000027D0  4E75                    2483                      RTS
000027D2                          2484  
000027D2                          2485  ************************************************************
000027D2                          2486  *USER_INPUT_STR: Grabs a users Hex input when giving starting
000027D2                          2487  *               and ending hex values
000027D2                          2488  *PRE-CONDITIONS: N/A
000027D2                          2489  *POST-CONDITIONS: Buffer contains a string of values that
000027D2                          2490  *               needs to be converted
000027D2                          2491  ************************************************************
000027D2                          2492                  
000027D2  43F9 000027F2           2493  USER_INPUT_STR      LEA     BUFFER, A1
000027D8  103C 0002               2494                      MOVE.B  #2, D0
000027DC  4E4F                    2495                      TRAP    #15
000027DE  4E75                    2496                      RTS
000027E0                          2497                  
000027E0  FFFF FFFF               2498  DONE    SIMHALT             ; halt simulator
000027E4                          2499  
000027E4  =0000000D               2500  CR                  EQU     $0D
000027E4  =0000000A               2501  LF                  EQU     $0A
000027E4  =00000009               2502  TAB                 EQU     $9
000027E4                          2503  
000027E4= 00000000                2504  START_ADD           DC.L    0
000027E8= 00000000                2505  END_ADD             DC.L    0
000027EC= 0000                    2506                      DC.W    0
000027EE= 00000000                2507  CURRENT_ADD         DC.L    0
000027F2                          2508  BUFFER              DS.B    80
00002842= 0D 0A 00                2509  NEW_LINE            DC.B    '', CR, LF, 0
00002845= 45 6E 74 65 72 20 ...   2510  START_PRINT         DC.B    'Enter The starting hex address (w/o spaces) to be disassembled: ', 0
00002886= 45 6E 74 65 72 20 ...   2511  END_PRINT           DC.B    'Enter the ending hex address (w/o spaces) to be disassembled: ', 0
000028C5= 53 74 61 72 74 69 ...   2512  CONFIRM_START       DC.B    'Starting Address: ', 0
000028D8= 45 6E 64 69 6E 67 ...   2513  CONFIRM_END         DC.B    'Ending Address: ', 0
000028E9= 41 72 65 20 74 68 ...   2514  CONFIRM_MESSAGE     DC.B    'Are the starting and ending address correct (Y/N)?: ', 0
0000291E= 50 72 65 73 73 20 ...   2515  CONTINUE            DC.B    'Press Enter to continue to the next page.', 0
00002948= 42 41 44 20 44 41 ...   2516  OPCODE_ERROR        DC.B    'BAD DATA', CR, LF, 0
00002953= 49 66 20 79 6F 75 ...   2517  AGAIN               DC.B    'If you would like to Disassemble again press Y: ', 0
00002984= 54 68 61 74 20 69 ...   2518  BAD_INPUT           DC.B    'That is an invalid address. Please try again.', CR, LF, 0
000029B4                          2519  
000029B4                          2520      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_LONG           1B0E
AGAIN               2953
ASL_GOOD            1D62
ASR_GOOD            1CD2
BAD_INPUT           2984
BUFFER              27F2
BYTE_DISPLACEMENT   20E2
CHECK_L_EA          150E
CHECK_R_EA          14A8
CONFIRM_END         28D8
CONFIRM_INPUT       10A0
CONFIRM_MESSAGE     28E9
CONFIRM_START       28C5
CONTINUE            291E
CONVERT_STR         1162
CONVERT_TO_HEX      1128
CR                  D
CURRENT_ADD         27EE
CYPHER_OPCODE       12DA
DISASSEMBLE         1284
DIS_DONE            12BC
DIS_LOOP            1296
DONE                27E0
DONE_PRINT          1160
EA_MODE_FOUND       1ED0
EA_REG_FOUND        2076
END_ADD             27E8
END_PRINT           2886
FIND_EA_MODE        1E9C
FIND_EA_MODE_DST    1ED2
FIND_EA_REG         206A
FIND_SIZE           209E
FIND_SRC_REG        2080
FIRST_HEX_IS_0      133A
FIRST_HEX_IS_4      135C
FIRST_HEX_IS_6      138E
FIRST_HEX_IS_8      13BE
FIRST_HEX_IS_B      13C6
FIRST_HEX_IS_D      13D8
FIRST_HEX_IS_E      13F4
FOUND_DISPLACEMENT  20D8
GET_DISPLACEMENT    20C0
GET_INPUT           1030
GET_SIZE            2096
GOOD_INPUT          111A
GRAB_DATA           111C
GRAB_DST            272E
GRAB_EA             2748
GRAB_FIRST_BYTE     2710
GRAB_FIRST_HEX      26E6
GRAB_FOURTH_HEX     2708
GRAB_LAST_BYTE      2724
GRAB_MID_BYTE       271A
GRAB_OP             272C
GRAB_REG            275E
GRAB_SECOND_HEX     26F4
GRAB_SRC            2746
GRAB_THIRD_HEX      26FE
HEX                 27B2
HEX_A               121E
HEX_B               122E
HEX_C               123E
HEX_D               124E
HEX_E               125E
HEX_EIGHT           11FE
HEX_F               126E
HEX_FIVE            11CE
HEX_FOUR            11BE
HEX_INVALID         127E
HEX_NINE            120E
HEX_ONE             118E
HEX_SEVEN           11EE
HEX_SIX             11DE
HEX_THREE           11AE
HEX_TWO             119E
INIT_DATA           101E
INVALID_INPUT       1092
INVALID_OPCODE      247E
LF                  A
LIST_HELPER         242E
LOAD_ADD            1AA2
LOAD_ADDA           1B1A
LOAD_ADD_EA         1AC4
LOAD_ASL_COUNT      1CFE
LOAD_ASL_EA         1D4A
LOAD_ASL_REG        1D24
LOAD_ASR_COUNT      1C6E
LOAD_ASR_EA         1CBA
LOAD_ASR_REG        1C94
LOAD_BCLR           1552
LOAD_CMP            1A22
LOAD_CMPI           15CA
LOAD_DIVS           18C4
LOAD_EOR            19E4
LOAD_JSR            17F4
LOAD_LEA            175C
LOAD_LSL_COUNT      1BDE
LOAD_LSL_EA         1C2A
LOAD_LSL_REG        1C04
LOAD_LSR_COUNT      1B4E
LOAD_LSR_EA         1B9A
LOAD_LSR_REG        1B74
LOAD_MOVE           1610
LOAD_MOVEA          1660
LOAD_MOVEM          16DE
LOAD_NEG            17AE
LOAD_OR             190A
LOAD_ORI            158C
LOAD_OR_EA          192C
LOAD_ROL_COUNT      1E1E
LOAD_ROL_EA         1E6A
LOAD_ROL_REG        1E44
LOAD_ROR_COUNT      1D8E
LOAD_ROR_EA         1DDA
LOAD_ROR_REG        1DB4
LOAD_SUB            1972
LOAD_SUBQ           1848
LOAD_SUB_EA         1994
LONG_DISPLACEMENT   2188
LSB                 114E
LSB_LETTER          115A
LSL_GOOD            1C42
LSR_GOOD            1BB2
MAIN                1000
MAX_PAGE            12BE
MEM_TO_REG          16EA
MOVEA_LONG          1654
MOVEM_LONG          16D2
MOVEM_SIZE          16C2
MOVE_LONG           1604
MOVE_WORD           15F8
MSB                 113C
MSB_LETTER          1154
NEG_BYTE            210E
NEG_LONG            21BA
NEG_WORD            2162
NEW_LINE            2842
OPCODE_ADD          1A86
OPCODE_ADDA         1AEE
OPCODE_ASL          1CEC
OPCODE_ASR          1C5C
OPCODE_BCLR         152A
OPCODE_BCS          186A
OPCODE_BGE          1878
OPCODE_BLT          1886
OPCODE_BRA          18A2
OPCODE_BREAK        27A2
OPCODE_BVC          1894
OPCODE_CMP          1A0E
OPCODE_CMPI         15AA
OPCODE_DIVS         18B0
OPCODE_DIVS_OR      1422
OPCODE_END          27AC
OPCODE_EOR          19BE
OPCODE_ERROR        2948
OPCODE_JSR          17C4
OPCODE_LEA          173A
OPCODE_LSL          1BCC
OPCODE_LSL_ASL_ROL  14C4
OPCODE_LSR          1B3C
OPCODE_LSR_ASR_ROR  1460
OPCODE_MOVE         15E8
OPCODE_MOVEA        163C
OPCODE_MOVEM        1682
OPCODE_MOVE_GROUP   1406
OPCODE_MULS         1A44
OPCODE_NEG          177A
OPCODE_OR           18EE
OPCODE_ORI          1574
OPCODE_ROL          1E0C
OPCODE_ROR          1D7C
OPCODE_RTS          1806
OPCODE_RTS_JSR      144E
OPCODE_SUB          1956
OPCODE_SUBQ         1820
PLAY_AGAIN          276E
POST_A0             239C
POST_A1             23AE
POST_A2             23C0
POST_A3             23D2
POST_A4             23E4
POST_A5             23F6
POST_A6             2408
POST_A7             241A
POST_D1             231E
POST_D2             2330
POST_D3             2342
POST_D4             2354
POST_D5             2366
POST_D6             2378
POST_D7             238A
POS_BYTE            20F4
POS_LONG            219E
POS_WORD            2146
PRE_A0              227A
PRE_A1              228C
PRE_A2              229E
PRE_A3              22B0
PRE_A4              22C2
PRE_A5              22D4
PRE_A6              22E6
PRE_A7              22F8
PRE_D1              21FC
PRE_D2              220E
PRE_D3              2220
PRE_D4              2232
PRE_D5              2244
PRE_D6              2256
PRE_D7              2268
PRE_DEC             230C
PRINT_ADD           264A
PRINT_ADDA          2660
PRINT_ADDREG        1F20
PRINT_ADDRESS       26C6
PRINT_ASL           269C
PRINT_ASR           268E
PRINT_BCLR          24AC
PRINT_BCS           2544
PRINT_BGE           255A
PRINT_BLT           2570
PRINT_BRA           259C
PRINT_BUFFER        27BC
PRINT_BVC           2586
PRINT_BYTE          2442
PRINT_CMP           261A
PRINT_CMPI          24BE
PRINT_DATAREG       1F08
PRINT_DIRECT_L      2008
PRINT_DIRECT_W      1FF4
PRINT_DIVS          25B2
PRINT_EA            2078
PRINT_EOR           260C
PRINT_IMMEDIATE     201C
PRINT_IMMEDIATE_B   2038
PRINT_IMMEDIATE_L   205A
PRINT_IMMEDIATE_W   204A
PRINT_INDIRECT      1F38
PRINT_INDIRECT_POST  1F60
PRINT_INDIRECT_PRE  1F90
PRINT_JSR           250A
PRINT_LEA           24E6
PRINT_LIST          21E2
PRINT_LIST_DONE     242C
PRINT_LONG          246A
PRINT_LSL           2680
PRINT_LSR           2672
PRINT_MESSAGE       27CA
PRINT_MOVE          25E4
PRINT_MOVEA         25F6
PRINT_MOVEM         24D0
PRINT_MULS          2630
PRINT_NEG           24FC
PRINT_OR            25CC
PRINT_ORI           249E
PRINT_ROL           26B8
PRINT_ROR           26AA
PRINT_RTS           2520
PRINT_SLASH         243C
PRINT_SPECIAL       1FBC
PRINT_SPECIAL_DST   1FD8
PRINT_SRC           208E
PRINT_SRC_ADDREG    1F32
PRINT_SRC_DATAREG   1F1A
PRINT_SRC_INDIRECT  1F54
PRINT_SRC_IND_POST  1F80
PRINT_SRC_IND_PRE   1FB0
PRINT_SUB           25D6
PRINT_SUBQ          2532
PRINT_WORD          2456
REG_TO_MEM          1712
RESTART             27A0
RETURN              1172
ROL_GOOD            1E82
ROR_GOOD            1DF2
SIZE_FOUND          20BE
SRC_REG_FOUND       208C
START               1000
START_ADD           27E4
START_PRINT         2845
STR_TO_HEX          1174
TAB                 9
USER_INPUT_STR      27D2
WORD_DISPLACEMENT   2132
